"""
Kasi Extractor v2.0 - GUI –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞ –∏–∑–≤–ª–∏—á–∞–Ω–µ –Ω–∞ –¥–∞–Ω–Ω–∏ –æ—Ç MDB –∏ CSV
–ü–æ–¥–¥—ä—Ä–∂–∞ –∫–∞–∫—Ç–æ .mdb —Ñ–∞–π–ª–æ–≤–µ (—á—Ä–µ–∑ mdbtools), —Ç–∞–∫–∞ –∏ –¥–∏—Ä–µ–∫—Ç–Ω–∞ —Ä–∞–±–æ—Ç–∞ —Å .csv —Ñ–∞–π–ª–æ–≤–µ
"""

from tkinter import ttk, filedialog, messagebox
from datetime import datetime, date
import tkinter as tk
import json
import csv
import sys
import io
import os
import subprocess
import tempfile
import platform

try:
    import pandas as pd
    PANDAS_AVAILABLE = True
except ImportError:
    PANDAS_AVAILABLE = False

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–ª–∏ —Å–º–µ –Ω–∞ Windows –∏ –∏–º–∞–º–µ mdbtools
IS_WINDOWS = platform.system().lower() == 'windows'
MDBTOOLS_AVAILABLE = False

# –ü—Ä–æ–≤–µ—Ä—è–≤–∞–º–µ –¥–∞–ª–∏ mdbtools —Å–∞ –Ω–∞–ª–∏—á–Ω–∏ –≤ —Å–∏—Å—Ç–µ–º–∞—Ç–∞
try:
    if IS_WINDOWS:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞ mdbtools –Ω–∞ Windows
        result = subprocess.run(['mdb-ver'], capture_output=True, text=True, timeout=5)
        MDBTOOLS_AVAILABLE = result.returncode == 0
    else:
        # –ù–∞ Linux –ø—Ä–æ–≤–µ—Ä—è–≤–∞–º–µ –∑–∞ mdb-tools
        result = subprocess.run(['mdb-ver'], capture_output=True, text=True, timeout=5)
        MDBTOOLS_AVAILABLE = result.returncode == 0
except (subprocess.TimeoutExpired, FileNotFoundError, subprocess.SubprocessError):
    MDBTOOLS_AVAILABLE = False

class KasiExtractor:
    def __init__(self, root):
        self.root = root
        self.root.title("SMS Notification Clients v2.0 - CSV Support")
        self.root.geometry("950x830")
        self.root.resizable(True, True)

        self.filtered_data_lines = []
        self.current_file_type = None
        self.file_path = tk.StringVar()
        self.start_date = tk.StringVar()
        self.end_date = tk.StringVar()
        
        # –ó–∞–¥–∞–≤–∞–Ω–µ –Ω–∞ –Ω–∞—á–∞–ª–Ω–∏ –¥–∞—Ç–∏
        today = date.today()
        month_ago = date(today.year, today.month-1 if today.month > 1 else 12, today.day)
        self.start_date.set(month_ago.strftime('%d.%m.%Y'))
        self.end_date.set(today.strftime('%d.%m.%Y'))
        
        self.create_widgets()
        self.set_default_dates()

    def validate_date_input(self, date_string):
        """–í–∞–ª–∏–¥–∏—Ä–∞ –¥–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç dd.mm.yyyy"""
        if not date_string.strip():
            return "empty"
        
        try:
            if len(date_string) != 10:
                return "invalid"
            
            if date_string.count('.') != 2:
                return "invalid"
            
            datetime.strptime(date_string, '%d.%m.%Y')
            return "valid"
        except ValueError:
            return "invalid"

    def validate_date_range(self):
        """–ü—Ä–æ–≤–µ—Ä—è–≤–∞ –¥–∞–ª–∏ –∫—Ä–∞–π–Ω–∞—Ç–∞ –¥–∞—Ç–∞ –µ —Å–ª–µ–¥ –Ω–∞—á–∞–ª–Ω–∞—Ç–∞"""
        start_text = self.start_date_entry.get().strip()
        end_text = self.end_date_entry.get().strip()
        
        if not start_text or not end_text:
            return True
        
        if (self.validate_date_input(start_text) != "valid" or 
            self.validate_date_input(end_text) != "valid"):
            return True
        
        try:
            start_date = datetime.strptime(start_text, '%d.%m.%Y')
            end_date = datetime.strptime(end_text, '%d.%m.%Y')
            return start_date <= end_date
        except:
            return True

    def on_date_entry_change(self, event, entry_widget):
        """–ü—Ä–æ–≤–µ—Ä—è–≤–∞ –¥–∞—Ç–∞—Ç–∞ –ø—Ä–∏ –ø—Ä–æ–º—è–Ω–∞ –≤ Entry –ø–æ–ª–µ—Ç–æ"""
        date_text = entry_widget.get()
        validation_result = self.validate_date_input(date_text)
        
        if validation_result == "valid":
            entry_widget.config(bg="lightgreen")
        elif validation_result == "empty":
            entry_widget.config(bg="white")
        else:
            entry_widget.config(bg="lightcoral")
            return
        
        if validation_result == "valid":
            if not self.validate_date_range():
                self.start_date_entry.config(bg="orange")
                self.end_date_entry.config(bg="orange")
                self.update_status_bar("–ì–†–ï–®–ö–ê: –ö—Ä–∞–π–Ω–∞—Ç–∞ –¥–∞—Ç–∞ –µ –ø—Ä–µ–¥–∏ –Ω–∞—á–∞–ª–Ω–∞—Ç–∞!")
            else:
                if self.validate_date_input(self.start_date_entry.get()) == "valid":
                    self.start_date_entry.config(bg="lightgreen")
                if self.validate_date_input(self.end_date_entry.get()) == "valid":
                    self.end_date_entry.config(bg="lightgreen")
                self.update_status_bar("–ì–æ—Ç–æ–≤ –∑–∞ —Ä–∞–±–æ—Ç–∞")
    
    def create_widgets(self):
        """–°—ä–∑–¥–∞–≤–∞ –≤—Å–∏—á–∫–∏ UI –µ–ª–µ–º–µ–Ω—Ç–∏"""
        main_frame = ttk.Frame(self.root, padding="10")
        main_frame.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        
        self.root.columnconfigure(0, weight=1)
        self.root.rowconfigure(0, weight=1)
        main_frame.columnconfigure(1, weight=1)
        
        # 1. –°–ï–ö–¶–ò–Ø: –ò–ó–ë–û–† –ù–ê –§–ê–ô–õ
        file_frame = ttk.LabelFrame(main_frame, text="üìÅ –ò–∑–±–æ—Ä –Ω–∞ MDB –∏–ª–∏ CSV —Ñ–∞–π–ª", padding="10")
        file_frame.grid(row=0, column=0, columnspan=2, sticky=(tk.W, tk.E), pady=(0, 10))
        file_frame.columnconfigure(1, weight=1)
        
        ttk.Button(file_frame, text="–ò–∑–±–µ—Ä–∏ —Ñ–∞–π–ª", 
                  command=self.select_file).grid(row=0, column=0, padx=(0, 10))
        
        self.file_entry = ttk.Entry(file_frame, textvariable=self.file_path, 
                                   state="readonly", width=50)
        self.file_entry.grid(row=0, column=1, sticky=(tk.W, tk.E))
        
        info_label = ttk.Label(file_frame, 
                              text="–ü–æ–¥–¥—ä—Ä–∂–∞–Ω–∏ —Ñ–∞–π–ª–æ–≤–µ: .mdb (Access Database), .csv (Comma Separated Values)", 
                              foreground="gray", font=("TkDefaultFont", 8))
        info_label.grid(row=1, column=0, columnspan=2, pady=(5, 0), sticky=tk.W)

        # 2. –°–ï–ö–¶–ò–Ø: –ò–ù–§–û–†–ú–ê–¶–ò–Ø –ó–ê MDBTOOLS
        self.mdb_info_frame = ttk.LabelFrame(main_frame, text="‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∑–∞ MDB –ø–æ–¥–¥—Ä—ä–∂–∫–∞", padding="10")
        self.mdb_info_frame.grid(row=1, column=0, columnspan=2, sticky=(tk.W, tk.E), pady=(0, 10))
        self.mdb_info_frame.columnconfigure(0, weight=1)
        
        mdb_info_text = ""
        if IS_WINDOWS:
            if MDBTOOLS_AVAILABLE:
                mdb_info_text = "‚úÖ mdbtools —Å–∞ –∏–Ω—Å—Ç–∞–ª–∏—Ä–∞–Ω–∏ –∏ –Ω–∞–ª–∏—á–Ω–∏ –≤ —Å–∏—Å—Ç–µ–º–∞—Ç–∞"
            else:
                mdb_info_text = "‚ö†Ô∏è –ó–∞ MDB —Ñ–∞–π–ª–æ–≤–µ –µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–∞ –∏–Ω—Å—Ç–∞–ª–∏—Ä–∞—Ç–µ mdbtools\n" \
                               "1. –ò–∑—Ç–µ–≥–ª–µ—Ç–µ –æ—Ç: https://github.com/mdbtools/mdbtools/releases\n" \
                               "2. –î–æ–±–∞–≤–µ—Ç–µ bin –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è—Ç–∞ –≤ —Å–∏—Å—Ç–µ–º–Ω–∏—è PATH\n" \
                               "3. –†–µ—Å—Ç–∞—Ä—Ç–∏—Ä–∞–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ—Ç–æ"
        else:
            mdb_info_text = "‚úÖ –ù–∞ Linux —Å–∏—Å—Ç–µ–º–∞ —Å mdb-tools"
        
        mdb_info_label = ttk.Label(self.mdb_info_frame, text=mdb_info_text, 
                                  foreground="green" if MDBTOOLS_AVAILABLE else "orange",
                                  font=("TkDefaultFont", 9), wraplength=700)
        mdb_info_label.grid(row=0, column=0, sticky=tk.W)

        # 3. –°–ï–ö–¶–ò–Ø: –°–¢–ê–¢–£–° –ù–ê –§–ê–ô–õ–ê
        status_frame = ttk.LabelFrame(main_frame, text="üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∑–∞ —Ñ–∞–π–ª–∞", padding="10")
        status_frame.grid(row=2, column=0, columnspan=2, sticky=(tk.W, tk.E), pady=(0, 10))
        status_frame.columnconfigure(0, weight=1)
        
        self.status_label = ttk.Label(status_frame, text="–ù—è–º–∞ –∏–∑–±—Ä–∞–Ω —Ñ–∞–π–ª", 
                                     foreground="gray")
        self.status_label.grid(row=0, column=0, sticky=tk.W)
        
        # 4. –°–ï–ö–¶–ò–Ø: –¢–ï–°–¢ –ù–ê –í–†–™–ó–ö–ê–¢–ê/–§–ê–ô–õ–ê
        test_frame = ttk.LabelFrame(main_frame, text="üîß –ü—Ä–µ–≥–ª–µ–¥ –Ω–∞ –¥–∞–Ω–Ω–∏—Ç–µ", padding="10")
        test_frame.grid(row=3, column=0, columnspan=2, sticky=(tk.W, tk.E), pady=(0, 10))
        
        self.test_button = ttk.Button(test_frame, text="üìã –ü—Ä–µ–≥–ª–µ–¥–∞–π —Ñ–∞–π–ª–∞", 
                                     command=self.test_file_connection, 
                                     state="disabled")
        self.test_button.grid(row=0, column=0, padx=(0, 10))

        # 5. –°–ï–ö–¶–ò–Ø: –ò–ó–ë–û–† –ù–ê –î–ê–¢–ò
        date_frame = ttk.LabelFrame(main_frame, text="üìÖ –§–∏–ª—Ç—Ä–∏—Ä–∞–Ω–µ –ø–æ –¥–∞—Ç–∏", padding="10")
        date_frame.grid(row=4, column=0, columnspan=2, sticky=(tk.W, tk.E), pady=(0, 10))
        date_frame.columnconfigure(1, weight=1)
        date_frame.columnconfigure(3, weight=1)
        
        ttk.Label(date_frame, text="–û—Ç –¥–∞—Ç–∞:").grid(row=0, column=0, padx=(0, 5), sticky=tk.W)
        self.start_date_entry = tk.Entry(date_frame, width=12)
        self.start_date_entry.grid(row=0, column=1, padx=(0, 20), sticky=tk.W)
        self.start_date_entry.bind('<KeyRelease>', lambda e: self.on_date_entry_change(e, self.start_date_entry))

        ttk.Label(date_frame, text="–î–æ –¥–∞—Ç–∞:").grid(row=0, column=2, padx=(0, 5), sticky=tk.W)
        self.end_date_entry = tk.Entry(date_frame, width=12)
        self.end_date_entry.grid(row=0, column=3, padx=(0, 20), sticky=tk.W)
        self.end_date_entry.bind('<KeyRelease>', lambda e: self.on_date_entry_change(e, self.end_date_entry))
        
        self.filter_button = ttk.Button(date_frame, text="üìä –§–∏–ª—Ç—Ä–∏—Ä–∞–π –¥–∞–Ω–Ω–∏—Ç–µ", 
                                       command=self.filter_data, state="disabled")
        self.filter_button.grid(row=0, column=4, padx=(20, 0))
        
        instruction_label = ttk.Label(date_frame, text="–§–æ—Ä–º–∞—Ç: dd.mm.yyyy (–Ω–∞–ø—Ä–∏–º–µ—Ä: 10.09.2025)", 
                                     foreground="gray", font=("TkDefaultFont", 8))
        instruction_label.grid(row=1, column=0, columnspan=4, pady=(5, 0), sticky=tk.W)
        
        self.filter_result_label = ttk.Label(date_frame, text="", foreground="gray")
        self.filter_result_label.grid(row=2, column=0, columnspan=5, pady=(10, 0), sticky=tk.W)

        # 6. –°–ï–ö–¶–ò–Ø: –ò–ó–í–õ–ò–ß–ê–ù–ï –ù–ê –ö–û–ù–ö–†–ï–¢–ù–ò –ö–û–õ–û–ù–ò
        extract_frame = ttk.LabelFrame(main_frame, text="üìã –ò–∑–≤–ª–∏—á–∞–Ω–µ –Ω–∞ –¥–∞–Ω–Ω–∏", padding="10")
        extract_frame.grid(row=5, column=0, columnspan=2, sticky=(tk.W, tk.E), pady=(0, 10))
        extract_frame.columnconfigure(0, weight=1)
        
        info_label = ttk.Label(extract_frame, 
                              text="–ö–æ–ª–æ–Ω–∏ –∑–∞ –∏–∑–≤–ª–∏—á–∞–Ω–µ: Number, End_Data, Model, Number_EKA, Ime_Obekt, Adres_Obekt, Dan_Number, Phone, Ime_Firma, bulst",
                              foreground="gray", font=("TkDefaultFont", 8), wraplength=500)
        info_label.grid(row=0, column=0, columnspan=3, sticky=(tk.W, tk.E), pady=(0, 10))
        
        self.extract_button = ttk.Button(extract_frame, text="üìä –ò–∑–≤–ª–µ—á–∏ –∫–æ–ª–æ–Ω–∏", 
                                        command=self.extract_specific_columns, state="disabled")
        self.extract_button.grid(row=1, column=0, padx=(0, 10))
        
        self.save_csv_button = ttk.Button(extract_frame, text="üíæ –ó–∞–ø–∏—à–∏ CSV", 
                                         command=self.save_csv, state="disabled")
        self.save_csv_button.grid(row=1, column=1, padx=(0, 10))
        
        self.save_json_button = ttk.Button(extract_frame, text="üíæ –ó–∞–ø–∏—à–∏ JSON", 
                                          command=self.save_json, state="disabled")
        self.save_json_button.grid(row=1, column=2)

        self.extract_result_label = ttk.Label(extract_frame, text="", foreground="gray")
        self.extract_result_label.grid(row=2, column=0, columnspan=3, pady=(10, 0), sticky=tk.W)
        
        # 7. –°–ï–ö–¶–ò–Ø: –ü–™–õ–ï–ù –ï–ö–°–ü–û–†–¢
        export_frame = ttk.LabelFrame(main_frame, text="üì§ –ü—ä–ª–µ–Ω –µ–∫—Å–ø–æ—Ä—Ç", padding="10")
        export_frame.grid(row=6, column=0, columnspan=2, sticky=(tk.W, tk.E), pady=(0, 10))
        export_frame.columnconfigure(0, weight=1)
        
        export_info_label = ttk.Label(export_frame, 
                                     text="–ï–∫—Å–ø–æ—Ä—Ç–∏—Ä–∞–Ω–µ –Ω–∞ —Ü—è–ª–∞—Ç–∞ —Ç–∞–±–ª–∏—Ü–∞ (–≤—Å–∏—á–∫–∏ –∫–æ–ª–æ–Ω–∏, –≤—Å–∏—á–∫–∏ —Ä–µ–¥–æ–≤–µ)",
                                     foreground="gray", font=("TkDefaultFont", 8))
        export_info_label.grid(row=0, column=0, sticky=tk.W, pady=(0, 10))
        
        self.full_export_button = ttk.Button(export_frame, text="üìÅ –ï–∫—Å–ø–æ—Ä—Ç–∏—Ä–∞–π —Ü—è–ª —Ñ–∞–π–ª", 
                                            command=self.export_full_table, state="disabled")
        self.full_export_button.grid(row=1, column=0, sticky=tk.W)
        
        # 8. –°–¢–ê–¢–£–° –ë–ê–†
        status_bar_frame = ttk.Frame(main_frame)
        status_bar_frame.grid(row=10, column=0, columnspan=2, sticky=(tk.W, tk.E), pady=(20, 0))
        status_bar_frame.columnconfigure(0, weight=1)

        self.status_bar = ttk.Label(status_bar_frame, text="–ì–æ—Ç–æ–≤ –∑–∞ —Ä–∞–±–æ—Ç–∞", 
                                   relief=tk.SUNKEN, anchor=tk.W, padding="5")
        self.status_bar.grid(row=0, column=0, sticky=(tk.W, tk.E))
        
        ttk.Button(status_bar_frame, text="–ò–∑—Ö–æ–¥", 
                  command=self.exit_application).grid(row=0, column=1, padx=(10, 0))

    def set_default_dates(self):
        """–ó–∞–¥–∞–≤–∞ –¥–Ω–µ—à–Ω–∞ –¥–∞—Ç–∞ –∫–∞—Ç–æ –ø–µ—Ä–∏–æ–¥ –ø–æ –ø–æ–¥—Ä–∞–∑–±–∏—Ä–∞–Ω–µ"""
        try:
            today = date.today()
            today_str = today.strftime('%d.%m.%Y')
            
            self.start_date_entry.delete(0, tk.END)
            self.start_date_entry.insert(0, today_str)
            
            self.end_date_entry.delete(0, tk.END)
            self.end_date_entry.insert(0, today_str)
            
            self.update_status_bar(f"–ó–∞–¥–∞–¥–µ–Ω –µ –ø–µ—Ä–∏–æ–¥: {today_str} - {today_str}")
            
        except Exception as e:
            print(f"–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –ù–µ –º–æ–∂–∞—Ö –¥–∞ –∑–∞–¥–∞–º –Ω–∞—á–∞–ª–Ω–∏—Ç–µ –¥–∞—Ç–∏: {e}")
            self.update_status_bar("–ì–æ—Ç–æ–≤ –∑–∞ —Ä–∞–±–æ—Ç–∞")

    def select_file(self):
        """–û—Ç–≤–∞—Ä—è –¥–∏–∞–ª–æ–≥ –∑–∞ –∏–∑–±–æ—Ä –Ω–∞ MDB –∏–ª–∏ CSV —Ñ–∞–π–ª"""
        file_path = filedialog.askopenfilename(
            title="–ò–∑–±–µ—Ä–∏ MDB –∏–ª–∏ CSV —Ñ–∞–π–ª",
            filetypes=[
                ("MDB —Ñ–∞–π–ª–æ–≤–µ", "*.mdb"),
                ("CSV —Ñ–∞–π–ª–æ–≤–µ", "*.csv"),
                ("–í—Å–∏—á–∫–∏ —Ñ–∞–π–ª–æ–≤–µ", "*.*")
            ]
        )
        
        if file_path:
            self.file_path.set(file_path)
            self.detect_file_type(file_path)
            self.update_file_status(file_path)
            self.update_status_bar(f"–ò–∑–±—Ä–∞–Ω —Ñ–∞–π–ª: {os.path.basename(file_path)}")

    def detect_file_type(self, file_path):
        """–†–∞–∑–ø–æ–∑–Ω–∞–≤–∞ —Ç–∏–ø–∞ –Ω–∞ —Ñ–∞–π–ª–∞ –∏ –∞–¥–∞–ø—Ç–∏—Ä–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        file_extension = os.path.splitext(file_path)[1].lower()
        
        if file_extension == '.mdb':
            self.current_file_type = 'mdb'
            self.test_button.config(text="üîß –¢–µ—Å—Ç–≤–∞–π MDB —Ñ–∞–π–ª–∞")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–ª–∏ mdbtools —Å–∞ –Ω–∞–ª–∏—á–Ω–∏ –∑–∞ MDB
            if not MDBTOOLS_AVAILABLE:
                self.filter_button.config(state="disabled")
                self.full_export_button.config(state="disabled")
                self.update_status_bar("‚ö†Ô∏è –ó–∞ MDB —Ñ–∞–π–ª–æ–≤–µ —Å–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–∏ mdbtools")
            else:
                self.filter_button.config(state="normal")
                self.full_export_button.config(state="normal")
                
        elif file_extension == '.csv':
            self.current_file_type = 'csv'
            self.test_button.config(text="üìã –ü—Ä–µ–≥–ª–µ–¥–∞–π CSV —Ñ–∞–π–ª–∞")
            self.filter_button.config(state="normal")
            self.full_export_button.config(state="normal")
        else:
            self.current_file_type = 'unknown'
            self.test_button.config(text="‚ùì –ü—Ä–µ–≥–ª–µ–¥–∞–π —Ñ–∞–π–ª–∞")
            self.filter_button.config(state="disabled")
            self.full_export_button.config(state="disabled")
    
    def update_file_status(self, file_path):
        """–û–±–Ω–æ–≤—è–≤–∞ —Å—Ç–∞—Ç—É—Å–∞ –Ω–∞ –∏–∑–±—Ä–∞–Ω–∏—è —Ñ–∞–π–ª"""
        if os.path.exists(file_path):
            file_size = os.path.getsize(file_path)
            size_mb = file_size / (1024 * 1024)
            file_type = self.current_file_type.upper() if self.current_file_type else "–ù–ï–ò–ó–í–ï–°–¢–ï–ù"
            
            status_text = f"‚úÖ –§–∞–π–ª: {os.path.basename(file_path)} ({file_type}, {size_mb:.1f} MB)"
            self.status_label.config(text=status_text, foreground="green")
            
            self.test_button.config(state="normal")
            
        else:
            self.status_label.config(text="‚ùå –§–∞–π–ª—ä—Ç –Ω–µ —Å—ä—â–µ—Å—Ç–≤—É–≤–∞", foreground="red")
            self.test_button.config(state="disabled")

    def test_file_connection(self):
        """–¢–µ—Å—Ç–≤–∞ —Ñ–∞–π–ª–∞ –∏ –ø–æ–∫–∞–∑–≤–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∑–∞ –Ω–µ–≥–æ"""
        if not self.file_path.get():
            messagebox.showerror("–ì—Ä–µ—à–∫–∞", "–ú–æ–ª—è –∏–∑–±–µ—Ä–µ—Ç–µ —Ñ–∞–π–ª –ø—ä—Ä–≤–æ!")
            return
        
        self.update_status_bar("–ü—Ä–µ–≥–ª–µ–¥–∞–Ω–µ –Ω–∞ —Ñ–∞–π–ª–∞...")
        
        if self.current_file_type == 'csv':
            self._test_csv_file()
        elif self.current_file_type == 'mdb':
            self._test_mdb_file()
        else:
            messagebox.showerror("–ì—Ä–µ—à–∫–∞", "–ù–µ–ø–æ–¥–¥—ä—Ä–∂–∞–Ω —Ñ–∞–π–ª–æ–≤ —Ñ–æ—Ä–º–∞—Ç!")

    def _test_csv_file(self):
        """–¢–µ—Å—Ç–≤–∞ CSV —Ñ–∞–π–ª"""
        try:
            if not PANDAS_AVAILABLE:
                messagebox.showerror("–ì—Ä–µ—à–∫–∞", "pandas –Ω–µ –µ –∏–Ω—Å—Ç–∞–ª–∏—Ä–∞–Ω! –ù–µ–æ–±—Ö–æ–¥–∏–º –µ –∑–∞ —Ä–∞–±–æ—Ç–∞ —Å CSV —Ñ–∞–π–ª–æ–≤–µ.")
                return
            
            df = pd.read_csv(self.file_path.get(), nrows=5, encoding='utf-8')
            total_rows = sum(1 for line in open(self.file_path.get(), 'r', encoding='utf-8')) - 1
            total_columns = len(df.columns)
            
            has_end_data = 'End_Data' in df.columns
            
            required_columns = ['Number', 'End_Data', 'Model', 'Number_EKA', 'Ime_Obekt', 
                              'Adres_Obekt', 'Dan_Number', 'Phone', 'Ime_Firma', 'bulst']
            found_columns = [col for col in required_columns if col in df.columns]
            
            messagebox.showinfo("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∑–∞ CSV —Ñ–∞–π–ª–∞", 
                              f"‚úÖ CSV —Ñ–∞–π–ª—ä—Ç –µ —á–µ—Ç–ª–∏–≤!\n\n"
                              f"üìä –û–±—â–æ —Ä–µ–¥–æ–≤–µ: {total_rows:,}\n"
                              f"üìã –û–±—â–æ –∫–æ–ª–æ–Ω–∏: {total_columns}\n"
                              f"üìÖ –ö–æ–ª–æ–Ω–∞ 'End_Data': {'‚úÖ –ù–∞–º–µ—Ä–µ–Ω–∞' if has_end_data else '‚ùå –ù–µ –µ –Ω–∞–º–µ—Ä–µ–Ω–∞'}\n"
                              f"üéØ –ù–∞–º–µ—Ä–µ–Ω–∏ –Ω—É–∂–Ω–∏ –∫–æ–ª–æ–Ω–∏: {len(found_columns)}/{len(required_columns)}\n\n"
                              f"–ü—ä—Ä–≤–∏—Ç–µ –∫–æ–ª–æ–Ω–∏:\n" + ", ".join(df.columns[:10]))
            
            self.update_status_bar("‚úÖ CSV —Ñ–∞–π–ª—ä—Ç –µ –≥–æ—Ç–æ–≤ –∑–∞ —Ä–∞–±–æ—Ç–∞")
            
        except Exception as e:
            messagebox.showerror("–ì—Ä–µ—à–∫–∞", f"–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ —á–µ—Ç–µ–Ω–µ –Ω–∞ CSV —Ñ–∞–π–ª–∞:\n{str(e)}")
            self.update_status_bar(f"–ì—Ä–µ—à–∫–∞: {str(e)}")

    def _test_mdb_file(self):
        """–¢–µ—Å—Ç–≤–∞ MDB —Ñ–∞–π–ª —Å mdbtools"""
        if not MDBTOOLS_AVAILABLE:
            messagebox.showerror("–ì—Ä–µ—à–∫–∞", 
                               "mdbtools –Ω–µ —Å–∞ –Ω–∞–ª–∏—á–Ω–∏!\n\n"
                               "–ú–æ–ª—è –∏–Ω—Å—Ç–∞–ª–∏—Ä–∞–π—Ç–µ mdbtools:\n"
                               "1. –ò–∑—Ç–µ–≥–ª–µ—Ç–µ –æ—Ç: https://github.com/mdbtools/mdbtools/releases\n"
                               "2. –î–æ–±–∞–≤–µ—Ç–µ bin –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è—Ç–∞ –≤ PATH\n"
                               "3. –†–µ—Å—Ç–∞—Ä—Ç–∏—Ä–∞–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ—Ç–æ")
            return
        
        try:
            # –ò–∑–ø–æ–ª–∑–≤–∞–º–µ mdb-tables –∑–∞ –ø–æ–ª—É—á–∞–≤–∞–Ω–µ –Ω–∞ —Å–ø–∏—Å—ä–∫ —Å —Ç–∞–±–ª–∏—Ü–∏
            result = subprocess.run(['mdb-tables', self.file_path.get()], 
                                  capture_output=True, text=True, timeout=30)
            
            if result.returncode != 0:
                messagebox.showerror("–ì—Ä–µ—à–∫–∞", 
                                   f"–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ —á–µ—Ç–µ–Ω–µ –Ω–∞ MDB —Ñ–∞–π–ª–∞:\n{result.stderr}")
                return
            
            tables = result.stdout.strip().split()
            
            if "Kasi_all" in tables:
                messagebox.showinfo("–£—Å–ø–µ—Ö", 
                                f"‚úÖ –í—Ä—ä–∑–∫–∞—Ç–∞ –µ —É—Å–ø–µ—à–Ω–∞!\n\n"
                                f"–ù–∞–º–µ—Ä–µ–Ω–∏ —Ç–∞–±–ª–∏—Ü–∏: {len(tables)}\n"
                                f"–¢–∞–±–ª–∏—Ü–∞ 'Kasi_all': ‚úÖ –ù–∞–º–µ—Ä–µ–Ω–∞\n\n"
                                f"–î—Ä—É–≥–∏ —Ç–∞–±–ª–∏—Ü–∏:\n" + "\n".join(tables))
                self.update_status_bar("‚úÖ MDB —Ñ–∞–π–ª—ä—Ç –µ –≥–æ—Ç–æ–≤ –∑–∞ —Ä–∞–±–æ—Ç–∞")
            else:
                messagebox.showwarning("–í–Ω–∏–º–∞–Ω–∏–µ", 
                                    f"–¢–∞–±–ª–∏—Ü–∞ 'Kasi_all' –Ω–µ –µ –Ω–∞–º–µ—Ä–µ–Ω–∞!\n\n"
                                    f"–ù–∞–ª–∏—á–Ω–∏ —Ç–∞–±–ª–∏—Ü–∏:\n" + "\n".join(tables))
                self.update_status_bar("‚ö†Ô∏è –¢–∞–±–ª–∏—Ü–∞ 'Kasi_all' –Ω–µ –µ –Ω–∞–º–µ—Ä–µ–Ω–∞")
            
        except subprocess.TimeoutExpired:
            messagebox.showerror("–ì—Ä–µ—à–∫–∞", "–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ —á–µ—Ç–µ–Ω–µ –Ω–∞ MDB —Ñ–∞–π–ª–∞!")
            self.update_status_bar("–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ —Ç–µ—Å—Ç–≤–∞–Ω–µ –Ω–∞ MDB")
        except Exception as e:
            messagebox.showerror("–ì—Ä–µ—à–∫–∞", f"–ù–µ–æ—á–∞–∫–≤–∞–Ω–∞ –≥—Ä–µ—à–∫–∞:\n{str(e)}")
            self.update_status_bar(f"–ì—Ä–µ—à–∫–∞: {str(e)}")

    def filter_data(self):
        """–§–∏–ª—Ç—Ä–∏—Ä–∞ –¥–∞–Ω–Ω–∏—Ç–µ –ø–æ –∏–∑–±—Ä–∞–Ω–∏—Ç–µ –¥–∞—Ç–∏"""
        if not self.file_path.get():
            messagebox.showerror("–ì—Ä–µ—à–∫–∞", "–ú–æ–ª—è –∏–∑–±–µ—Ä–µ—Ç–µ —Ñ–∞–π–ª –ø—ä—Ä–≤–æ!")
            return
        
        if self.current_file_type == 'csv':
            return self._filter_csv_data()
        elif self.current_file_type == 'mdb':
            return self._filter_mdb_data()
        else:
            messagebox.showerror("–ì—Ä–µ—à–∫–∞", "–ù–µ–ø–æ–¥–¥—ä—Ä–∂–∞–Ω —Ñ–∞–π–ª–æ–≤ —Ñ–æ—Ä–º–∞—Ç!")
            return False

    def _filter_csv_data(self):
        """–§–∏–ª—Ç—Ä–∏—Ä–∞ CSV –¥–∞–Ω–Ω–∏"""
        if not PANDAS_AVAILABLE:
            messagebox.showerror("–ì—Ä–µ—à–∫–∞", "pandas –Ω–µ –µ –∏–Ω—Å—Ç–∞–ª–∏—Ä–∞–Ω!")
            return False
        
        try:
            start_date_str = self.start_date_entry.get().strip()
            end_date_str = self.end_date_entry.get().strip()
            
            if not start_date_str or not end_date_str:
                messagebox.showerror("–ì—Ä–µ—à–∫–∞", "–ú–æ–ª—è –≤—ä–≤–µ–¥–µ—Ç–µ –Ω–∞—á–∞–ª–Ω–∞ –∏ –∫—Ä–∞–π–Ω–∞ –¥–∞—Ç–∞!")
                return False
            
            if not self.validate_date_range():
                messagebox.showerror("–ì—Ä–µ—à–∫–∞", "–ö—Ä–∞–π–Ω–∞—Ç–∞ –¥–∞—Ç–∞ –Ω–µ –º–æ–∂–µ –¥–∞ –±—ä–¥–µ –ø—Ä–µ–¥–∏ –Ω–∞—á–∞–ª–Ω–∞—Ç–∞ –¥–∞—Ç–∞!")
                return False
                
        except Exception as e:
            messagebox.showerror("–ì—Ä–µ—à–∫–∞", f"–ü—Ä–æ–±–ª–µ–º —Å —á–µ—Ç–µ–Ω–µ—Ç–æ –Ω–∞ –¥–∞—Ç–∏—Ç–µ:\n{str(e)}")
            return False

        self.update_status_bar(f"–§–∏–ª—Ç—Ä–∏—Ä–∞–Ω–µ –æ—Ç {start_date_str} –¥–æ {end_date_str}...")
        
        try:
            df = pd.read_csv(self.file_path.get(), encoding='utf-8')
            start_date = datetime.strptime(start_date_str, '%d.%m.%Y')
            end_date = datetime.strptime(end_date_str, '%d.%m.%Y')
            
            if 'End_Data' not in df.columns:
                messagebox.showerror("–ì—Ä–µ—à–∫–∞", "–ö–æ–ª–æ–Ω–∞ 'End_Data' –Ω–µ –µ –Ω–∞–º–µ—Ä–µ–Ω–∞ –≤ CSV —Ñ–∞–π–ª–∞!")
                return False
            
            try:
                df['End_Data_parsed'] = pd.to_datetime(df['End_Data'], format='%m/%d/%y %H:%M:%S', errors='coerce')
            except:
                try:
                    df['End_Data_parsed'] = pd.to_datetime(df['End_Data'], format='%m/%d/%Y %H:%M:%S', errors='coerce')
                except:
                    df['End_Data_parsed'] = pd.to_datetime(df['End_Data'], errors='coerce')
            
            mask = (df['End_Data_parsed'].dt.date >= start_date.date()) & \
                (df['End_Data_parsed'].dt.date <= end_date.date())
            filtered_df = df[mask]
            
            self._save_filtered_data_as_lines(filtered_df)
            
            total_rows = len(filtered_df)
            original_rows = len(df)
            percent = (total_rows/original_rows*100) if original_rows > 0 else 0
            
            result_text = f"‚úÖ –§–∏–ª—Ç—Ä–∏—Ä–∞–Ω–∏ {total_rows} –æ—Ç –æ–±—â–æ {original_rows} —Ä–µ–¥–∞"
            self.filter_result_label.config(text=result_text, foreground="green")
            self.update_status_bar(f"–§–∏–ª—Ç—Ä–∏—Ä–∞–Ω–µ –∑–∞–≤—ä—Ä—à–µ–Ω–æ: {total_rows} –æ—Ç {original_rows} —Ä–µ–¥–∞ ({percent:.1f}%)")
            
            messagebox.showinfo("–†–µ–∑—É–ª—Ç–∞—Ç", f"–§–∏–ª—Ç—Ä–∏—Ä–∞–Ω–µ—Ç–æ –µ –∑–∞–≤—ä—Ä—à–µ–Ω–æ!\n\n–ü–µ—Ä–∏–æ–¥: {start_date_str} - {end_date_str}\n–û–±—â–æ —Ä–µ–¥–æ–≤–µ: {original_rows}\n–§–∏–ª—Ç—Ä–∏—Ä–∞–Ω–∏ —Ä–µ–¥–æ–≤–µ: {total_rows}")
            
            self.extract_button.config(state="normal")
            return True
            
        except Exception as e:
            messagebox.showerror("–ì—Ä–µ—à–∫–∞", f"–ù–µ–æ—á–∞–∫–≤–∞–Ω–∞ –≥—Ä–µ—à–∫–∞:\n{str(e)}")
            self.update_status_bar(f"–ì—Ä–µ—à–∫–∞: {str(e)}")
            return False

    def _filter_mdb_data(self):
        """–§–∏–ª—Ç—Ä–∏—Ä–∞ MDB –¥–∞–Ω–Ω–∏ —Å mdbtools"""
        if not MDBTOOLS_AVAILABLE:
            messagebox.showerror("–ì—Ä–µ—à–∫–∞", "mdbtools –Ω–µ —Å–∞ –Ω–∞–ª–∏—á–Ω–∏!")
            return False
        
        try:
            start_date_str = self.start_date_entry.get().strip()
            end_date_str = self.end_date_entry.get().strip()
            
            if not start_date_str or not end_date_str:
                messagebox.showerror("–ì—Ä–µ—à–∫–∞", "–ú–æ–ª—è –≤—ä–≤–µ–¥–µ—Ç–µ –Ω–∞—á–∞–ª–Ω–∞ –∏ –∫—Ä–∞–π–Ω–∞ –¥–∞—Ç–∞!")
                return False
            
            if not self.validate_date_range():
                messagebox.showerror("–ì—Ä–µ—à–∫–∞", "–ö—Ä–∞–π–Ω–∞—Ç–∞ –¥–∞—Ç–∞ –Ω–µ –º–æ–∂–µ –¥–∞ –±—ä–¥–µ –ø—Ä–µ–¥–∏ –Ω–∞—á–∞–ª–Ω–∞—Ç–∞ –¥–∞—Ç–∞!")
                return False
                
        except Exception as e:
            messagebox.showerror("–ì—Ä–µ—à–∫–∞", f"–ü—Ä–æ–±–ª–µ–º —Å —á–µ—Ç–µ–Ω–µ—Ç–æ –Ω–∞ –¥–∞—Ç–∏—Ç–µ:\n{str(e)}")
            return False

        self.update_status_bar(f"–§–∏–ª—Ç—Ä–∏—Ä–∞–Ω–µ –æ—Ç {start_date_str} –¥–æ {end_date_str}...")
        
        try:
            # –ï–∫—Å–ø–æ—Ä—Ç–∏—Ä–∞–º–µ —Ü—è–ª–∞—Ç–∞ —Ç–∞–±–ª–∏—Ü–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ
            with tempfile.NamedTemporaryFile(suffix='.csv', delete=False, mode='w+', encoding='utf-8') as temp_file:
                temp_csv_path = temp_file.name
            
            # –ï–∫—Å–ø–æ—Ä—Ç–∏—Ä–∞–º–µ —Ç–∞–±–ª–∏—Ü–∞—Ç–∞ —Å mdb-export
            cmd = ['mdb-export', self.file_path.get(), 'Kasi_all']
            
            with open(temp_csv_path, 'w', encoding='utf-8') as output_file:
                result = subprocess.run(cmd, stdout=output_file, stderr=subprocess.PIPE, text=True, timeout=120)
            
            if result.returncode != 0:
                messagebox.showerror("–ì—Ä–µ—à–∫–∞", f"–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –µ–∫—Å–ø–æ—Ä—Ç –Ω–∞ MDB: {result.stderr}")
                os.unlink(temp_csv_path)
                return False
            
            # –ß–µ—Ç–µ–º CSV —Å pandas
            df = pd.read_csv(temp_csv_path, encoding='utf-8')
            
            # –ü–æ—á–∏—Å—Ç–≤–∞–º–µ –≤—Ä–µ–º–µ–Ω–Ω–∏—è —Ñ–∞–π–ª
            os.unlink(temp_csv_path)
            
            start_date = datetime.strptime(start_date_str, '%d.%m.%Y')
            end_date = datetime.strptime(end_date_str, '%d.%m.%Y')
            
            if 'End_Data' not in df.columns:
                messagebox.showerror("–ì—Ä–µ—à–∫–∞", "–ö–æ–ª–æ–Ω–∞ 'End_Data' –Ω–µ –µ –Ω–∞–º–µ—Ä–µ–Ω–∞ –≤ —Ç–∞–±–ª–∏—Ü–∞—Ç–∞!")
                return False
            
            try:
                df['End_Data_parsed'] = pd.to_datetime(df['End_Data'], format='%m/%d/%y %H:%M:%S', errors='coerce')
            except:
                try:
                    df['End_Data_parsed'] = pd.to_datetime(df['End_Data'], format='%m/%d/%Y %H:%M:%S', errors='coerce')
                except:
                    df['End_Data_parsed'] = pd.to_datetime(df['End_Data'], errors='coerce')
            
            mask = (df['End_Data_parsed'].dt.date >= start_date.date()) & \
                (df['End_Data_parsed'].dt.date <= end_date.date())
            filtered_df = df[mask]
            
            self._save_filtered_data_as_lines(filtered_df)
            
            total_rows = len(filtered_df)
            original_rows = len(df)
            percent = (total_rows/original_rows*100) if original_rows > 0 else 0
            
            result_text = f"‚úÖ –§–∏–ª—Ç—Ä–∏—Ä–∞–Ω–∏ {total_rows} –æ—Ç –æ–±—â–æ {original_rows} —Ä–µ–¥–∞"
            self.filter_result_label.config(text=result_text, foreground="green")
            self.update_status_bar(f"–§–∏–ª—Ç—Ä–∏—Ä–∞–Ω–µ –∑–∞–≤—ä—Ä—à–µ–Ω–æ: {total_rows} –æ—Ç {original_rows} —Ä–µ–¥–∞ ({percent:.1f}%)")
            
            messagebox.showinfo("–†–µ–∑—É–ª—Ç–∞—Ç", f"–§–∏–ª—Ç—Ä–∏—Ä–∞–Ω–µ—Ç–æ –µ –∑–∞–≤—ä—Ä—à–µ–Ω–æ!\n\n–ü–µ—Ä–∏–æ–¥: {start_date_str} - {end_date_str}\n–û–±—â–æ —Ä–µ–¥–æ–≤–µ: {original_rows}\n–§–∏–ª—Ç—Ä–∏—Ä–∞–Ω–∏ —Ä–µ–¥–æ–≤–µ: {total_rows}")
            
            self.extract_button.config(state="normal")
            return True
            
        except subprocess.TimeoutExpired:
            messagebox.showerror("–ì—Ä–µ—à–∫–∞", "–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ —Ñ–∏–ª—Ç—Ä–∏—Ä–∞–Ω–µ –Ω–∞ MDB —Ñ–∞–π–ª–∞!")
            self.update_status_bar("–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ —Ñ–∏–ª—Ç—Ä–∏—Ä–∞–Ω–µ")
            return False
        except Exception as e:
            messagebox.showerror("–ì—Ä–µ—à–∫–∞", f"–ù–µ–æ—á–∞–∫–≤–∞–Ω–∞ –≥—Ä–µ—à–∫–∞ –ø—Ä–∏ —Ñ–∏–ª—Ç—Ä–∏—Ä–∞–Ω–µ:\n{str(e)}")
            self.update_status_bar(f"–ì—Ä–µ—à–∫–∞: {str(e)}")
            return False

    def _save_filtered_data_as_lines(self, filtered_df):
        """–ó–∞–ø–∞–∑–≤–∞ —Ñ–∏–ª—Ç—Ä–∏—Ä–∞–Ω–∏—Ç–µ –¥–∞–Ω–Ω–∏ –∫–∞—Ç–æ CSV lines"""
        self.filtered_data_lines = []
        
        columns = list(filtered_df.columns)
        if 'End_Data_parsed' in columns:
            columns.remove('End_Data_parsed')
        self.filtered_data_lines.append(','.join(f'"{col}"' for col in columns))
        
        for _, row in filtered_df.iterrows():
            csv_row = []
            for col in columns:
                value = row[col]
                if pd.isna(value):
                    csv_row.append('""')
                else:
                    str_value = str(value).replace('"', '""')
                    csv_row.append(f'"{str_value}"')
            self.filtered_data_lines.append(','.join(csv_row))

    def extract_specific_columns(self):
        """–ò–∑–≤–ª–∏—á–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏—Ç–µ 10 –∫–æ–ª–æ–Ω–∏ –æ—Ç —Ñ–∏–ª—Ç—Ä–∏—Ä–∞–Ω–∏—Ç–µ –¥–∞–Ω–Ω–∏"""
        if not hasattr(self, 'filtered_data_lines') or len(self.filtered_data_lines) < 2:
            messagebox.showerror("–ì—Ä–µ—à–∫–∞", "–ù—è–º–∞ —Ñ–∏–ª—Ç—Ä–∏—Ä–∞–Ω–∏ –¥–∞–Ω–Ω–∏! –ü—ä—Ä–≤–æ –Ω–∞–ø—Ä–∞–≤–µ—Ç–µ —Ñ–∏–ª—Ç—Ä–∞—Ü–∏—è.")
            return False
        
        self.update_status_bar("–ò–∑–≤–ª–∏—á–∞–Ω–µ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏ –∫–æ–ª–æ–Ω–∏...")
        
        required_columns = ['Number', 'End_Data', 'Model', 'Number_EKA', 'Ime_Obekt', 
                        'Adres_Obekt', 'Dan_Number', 'Phone', 'Ime_Firma', 'bulst']
        
        try:
            header_line = self.filtered_data_lines[0]
            header_reader = csv.reader(io.StringIO(header_line))
            headers = next(header_reader)
            
            column_indices = {}
            missing_columns = []
            
            for col_name in required_columns:
                found_index = None
                for i, header in enumerate(headers):
                    if col_name.lower() in header.lower():
                        found_index = i
                        break
                
                if found_index is not None:
                    column_indices[col_name] = found_index
                else:
                    missing_columns.append(col_name)
            
            if missing_columns:
                messagebox.showwarning("–í–Ω–∏–º–∞–Ω–∏–µ", 
                                    f"–°–ª–µ–¥–Ω–∏—Ç–µ –∫–æ–ª–æ–Ω–∏ –Ω–µ —Å–∞ –Ω–∞–º–µ—Ä–µ–Ω–∏:\n{', '.join(missing_columns)}\n\n"
                                    f"–©–µ –±—ä–¥–∞—Ç –∏–∑–≤–ª–µ—á–µ–Ω–∏ —Å–∞–º–æ –Ω–∞–º–µ—Ä–µ–Ω–∏—Ç–µ –∫–æ–ª–æ–Ω–∏.")
            
            new_header = [col for col in required_columns if col in column_indices]
            extracted_data = []
            extracted_data.append(','.join(f'"{col}"' for col in new_header))
            
            for line in self.filtered_data_lines[1:]:
                try:
                    reader = csv.reader(io.StringIO(line))
                    fields = next(reader)
                    
                    new_row = []
                    for col_name in new_header:
                        if column_indices[col_name] < len(fields):
                            field_value = fields[column_indices[col_name]]
                            
                            if field_value.endswith('.0') and field_value.replace('.0', '').replace('-', '').isdigit():
                                field_value = field_value[:-2]
                            
                            new_row.append(f'"{field_value}"')
                        else:
                            new_row.append('""')
                    
                    extracted_data.append(','.join(new_row))
                
                except Exception as e:
                    continue
            
            self.extracted_data_lines = extracted_data
            total_extracted = len(extracted_data) - 1
            
            result_text = f"‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–∏ {len(new_header)} –∫–æ–ª–æ–Ω–∏ –æ—Ç {total_extracted} —Ä–µ–¥–∞"
            if hasattr(self, 'filtered_data_lines'):
                original_rows = len(self.filtered_data_lines) - 1
                result_text += f" (–æ—Ç {original_rows} —Ñ–∏–ª—Ç—Ä–∏—Ä–∞–Ω–∏)"
            
            self.extract_result_label.config(text=result_text, foreground="green")
            self.update_status_bar(f"–ò–∑–≤–ª–∏—á–∞–Ω–µ –∑–∞–≤—ä—Ä—à–µ–Ω–æ: {total_extracted} —Ä–µ–¥–∞ —Å {len(new_header)} –∫–æ–ª–æ–Ω–∏")
            
            self.save_csv_button.config(state="normal")
            self.save_json_button.config(state="normal")
            
            messagebox.showinfo("–£—Å–ø–µ—Ö", 
                            f"–ò–∑–≤–ª–∏—á–∞–Ω–µ—Ç–æ –µ —É—Å–ø–µ—à–Ω–æ!\n\n"
                            f"–ö–æ–ª–æ–Ω–∏: {len(new_header)}\n"
                            f"–†–µ–¥–æ–≤–µ: {total_extracted}\n\n"
                            f"–ù–∞–º–µ—Ä–µ–Ω–∏ –∫–æ–ª–æ–Ω–∏:\n{', '.join(new_header)}")
            
            return True
            
        except Exception as e:
            messagebox.showerror("–ì—Ä–µ—à–∫–∞", f"–ù–µ–æ—á–∞–∫–≤–∞–Ω–∞ –≥—Ä–µ—à–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–∏—á–∞–Ω–µ:\n{str(e)}")
            self.update_status_bar(f"–ì—Ä–µ—à–∫–∞: {str(e)}")
            return False

    def export_full_table(self):
        """–ï–∫—Å–ø–æ—Ä—Ç–∏—Ä–∞ —Ü–µ–ª–∏—è —Ñ–∞–π–ª –≤ CSV —Ñ–æ—Ä–º–∞—Ç"""
        if not self.file_path.get():
            messagebox.showerror("–ì—Ä–µ—à–∫–∞", "–ú–æ–ª—è –∏–∑–±–µ—Ä–µ—Ç–µ —Ñ–∞–π–ª –ø—ä—Ä–≤–æ!")
            return
        
        if self.current_file_type == 'csv':
            self._export_full_csv()
        elif self.current_file_type == 'mdb':
            self._export_full_mdb()
        else:
            messagebox.showerror("–ì—Ä–µ—à–∫–∞", "–ù–µ–ø–æ–¥–¥—ä—Ä–∂–∞–Ω —Ñ–∞–π–ª–æ–≤ —Ñ–æ—Ä–º–∞—Ç!")

    def _export_full_csv(self):
        """–ï–∫—Å–ø–æ—Ä—Ç–∏—Ä–∞ —Ü–µ–ª–∏—è CSV —Ñ–∞–π–ª"""
        file_path = filedialog.asksaveasfilename(
            title="–ï–∫—Å–ø–æ—Ä—Ç–∏—Ä–∞–π —Ü—è–ª CSV —Ñ–∞–π–ª",
            defaultextension=".csv",
            filetypes=[("CSV —Ñ–∞–π–ª–æ–≤–µ", "*.csv"), ("–í—Å–∏—á–∫–∏ —Ñ–∞–π–ª–æ–≤–µ", "*.*")],
            initialfile=os.path.splitext(os.path.basename(self.file_path.get()))[0] + "_export.csv"
        )
        
        if not file_path:
            return
        
        try:
            self.update_status_bar("–ï–∫—Å–ø–æ—Ä—Ç–∏—Ä–∞–Ω–µ –Ω–∞ —Ü–µ–ª–∏—è CSV —Ñ–∞–π–ª...")
            
            if not PANDAS_AVAILABLE:
                import shutil
                shutil.copy2(self.file_path.get(), file_path)
            else:
                df = pd.read_csv(self.file_path.get(), encoding='utf-8')
                
                for column in df.columns:
                    if df[column].dtype == 'object':
                        df[column] = df[column].astype(str).apply(
                            lambda x: self.fix_encoding_utf8_to_windows1251(x) if x != 'nan' else ''
                        )
                
                df.to_csv(file_path, index=False, encoding='utf-8')
            
            file_size = os.path.getsize(file_path)
            
            if PANDAS_AVAILABLE:
                total_rows = len(df)
                total_columns = len(df.columns)
                stats_text = f"üìä –†–µ–¥–æ–≤–µ: {total_rows:,}\nüìã –ö–æ–ª–æ–Ω–∏: {total_columns}\n"
            else:
                stats_text = ""
            
            self.update_status_bar(f"–ü—ä–ª–µ–Ω –µ–∫—Å–ø–æ—Ä—Ç –∑–∞–≤—ä—Ä—à–µ–Ω: {os.path.basename(file_path)}")
            
            messagebox.showinfo("–£—Å–ø–µ—Ö", 
                            f"–ü—ä–ª–Ω–∏—è—Ç –µ–∫—Å–ø–æ—Ä—Ç –µ –∑–∞–≤—ä—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!\n\n"
                            f"üìÅ –§–∞–π–ª: {os.path.basename(file_path)}\n"
                            f"{stats_text}"
                            f"üíæ –†–∞–∑–º–µ—Ä: {file_size / 1024 / 1024:.1f} MB\n"
                            f"üîó –ü—ä—Ç: {file_path}")
            
        except Exception as e:
            messagebox.showerror("–ì—Ä–µ—à–∫–∞", f"–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –ø—ä–ª–µ–Ω –µ–∫—Å–ø–æ—Ä—Ç:\n{str(e)}")
            self.update_status_bar(f"–ì—Ä–µ—à–∫–∞: {str(e)}")

    def _export_full_mdb(self):
        """–ï–∫—Å–ø–æ—Ä—Ç–∏—Ä–∞ —Ü—è–ª–∞—Ç–∞ MDB —Ç–∞–±–ª–∏—Ü–∞ —Å mdbtools"""
        if not MDBTOOLS_AVAILABLE:
            messagebox.showerror("–ì—Ä–µ—à–∫–∞", "mdbtools –Ω–µ —Å–∞ –Ω–∞–ª–∏—á–Ω–∏!")
            return
        
        file_path = filedialog.asksaveasfilename(
            title="–ï–∫—Å–ø–æ—Ä—Ç–∏—Ä–∞–π —Ü—è–ª–∞ —Ç–∞–±–ª–∏—Ü–∞ –∫–∞—Ç–æ CSV",
            defaultextension=".csv",
            filetypes=[("CSV —Ñ–∞–π–ª–æ–≤–µ", "*.csv"), ("–í—Å–∏—á–∫–∏ —Ñ–∞–π–ª–æ–≤–µ", "*.*")],
            initialfile="Kasi_all_full_export.csv"
        )
        
        if not file_path:
            return
        
        try:
            self.update_status_bar("–ï–∫—Å–ø–æ—Ä—Ç–∏—Ä–∞–Ω–µ –Ω–∞ —Ü—è–ª–∞—Ç–∞ —Ç–∞–±–ª–∏—Ü–∞...")
            
            # –ò–∑–ø–æ–ª–∑–≤–∞–º–µ mdb-export –∑–∞ –¥–∏—Ä–µ–∫—Ç–µ–Ω –µ–∫—Å–ø–æ—Ä—Ç
            cmd = ['mdb-export', self.file_path.get(), 'Kasi_all']
            
            with open(file_path, 'w', encoding='utf-8') as output_file:
                result = subprocess.run(cmd, stdout=output_file, stderr=subprocess.PIPE, text=True, timeout=300)
            
            if result.returncode != 0:
                messagebox.showerror("–ì—Ä–µ—à–∫–∞", f"–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –µ–∫—Å–ø–æ—Ä—Ç –Ω–∞ MDB: {result.stderr}")
                return
            
            # –ê–∫–æ –∏–º–∞–º–µ pandas, –ø–æ–ø—Ä–∞–≤—è–º–µ –∫–æ–¥–∏—Ä–æ–≤–∫–∞—Ç–∞
            if PANDAS_AVAILABLE:
                df = pd.read_csv(file_path, encoding='utf-8')
                
                for column in df.columns:
                    if df[column].dtype == 'object':
                        df[column] = df[column].astype(str).apply(
                            lambda x: self.fix_encoding_utf8_to_windows1251(x) if x != 'nan' else ''
                        )
                
                df.to_csv(file_path, index=False, encoding='utf-8')
                total_rows = len(df)
                total_columns = len(df.columns)
            else:
                # –ë—Ä–æ–∏–º —Ä–µ–¥–æ–≤–µ –±–µ–∑ header
                with open(file_path, 'r', encoding='utf-8') as f:
                    total_rows = sum(1 for _ in f) - 1
                total_columns = "unknown"
            
            file_size = os.path.getsize(file_path)
            
            self.update_status_bar(f"–ü—ä–ª–µ–Ω –µ–∫—Å–ø–æ—Ä—Ç –∑–∞–≤—ä—Ä—à–µ–Ω: {os.path.basename(file_path)}")
            
            messagebox.showinfo("–£—Å–ø–µ—Ö", 
                            f"–ü—ä–ª–Ω–∏—è—Ç –µ–∫—Å–ø–æ—Ä—Ç –µ –∑–∞–≤—ä—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!\n\n"
                            f"üìÅ –§–∞–π–ª: {os.path.basename(file_path)}\n"
                            f"üìä –†–µ–¥–æ–≤–µ: {total_rows:,}\n"
                            f"üìã –ö–æ–ª–æ–Ω–∏: {total_columns}\n"
                            f"üíæ –†–∞–∑–º–µ—Ä: {file_size / 1024 / 1024:.1f} MB\n"
                            f"üîó –ü—ä—Ç: {file_path}")
            
        except subprocess.TimeoutExpired:
            messagebox.showerror("–ì—Ä–µ—à–∫–∞", "–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –µ–∫—Å–ø–æ—Ä—Ç –Ω–∞ MDB —Ñ–∞–π–ª–∞!")
            self.update_status_bar("–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –µ–∫—Å–ø–æ—Ä—Ç")
        except Exception as e:
            messagebox.showerror("–ì—Ä–µ—à–∫–∞", f"–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –ø—ä–ª–µ–Ω –µ–∫—Å–ø–æ—Ä—Ç:\n{str(e)}")
            self.update_status_bar(f"–ì—Ä–µ—à–∫–∞: {str(e)}")

    def update_status_bar(self, message):
        """–û–±–Ω–æ–≤—è–≤–∞ —Å—Ç–∞—Ç—É—Å –±–∞—Ä–∞"""
        self.status_bar.config(text=message)
        self.root.update_idletasks()
    
    def exit_application(self):
        """–ó–∞—Ç–≤–∞—Ä—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ—Ç–æ"""
        self.root.quit()

    def save_csv(self):
        """–ó–∞–ø–∏—Å –≤ CSV —Ñ–æ—Ä–º–∞—Ç"""
        if not hasattr(self, 'extracted_data_lines') or len(self.extracted_data_lines) < 2:
            messagebox.showerror("–ì—Ä–µ—à–∫–∞", "–ù—è–º–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏ –¥–∞–Ω–Ω–∏ –∑–∞ –∑–∞–ø–∏—Å!")
            return
        
        file_path = filedialog.asksaveasfilename(
            title="–ó–∞–ø–∏—à–∏ –∫–∞—Ç–æ CSV",
            defaultextension=".csv",
            filetypes=[("CSV —Ñ–∞–π–ª–æ–≤–µ", "*.csv"), ("–í—Å–∏—á–∫–∏ —Ñ–∞–π–ª–æ–≤–µ", "*.*")]
        )
        
        if not file_path:
            return
        
        try:
            self.update_status_bar("–ó–∞–ø–∏—Å–≤–∞–Ω–µ –Ω–∞ CSV —Ñ–∞–π–ª...")
            
            with open(file_path, 'w', encoding='utf-8', newline='') as f:
                for line in self.extracted_data_lines:
                    f.write(line + '\n')
            
            total_rows = len(self.extracted_data_lines) - 1
            file_size = os.path.getsize(file_path)
            
            self.update_status_bar(f"CSV —Ñ–∞–π–ª –∑–∞–ø–∏—Å–∞–Ω —É—Å–ø–µ—à–Ω–æ: {os.path.basename(file_path)}")
            
            messagebox.showinfo("–£—Å–ø–µ—Ö", 
                               f"CSV —Ñ–∞–π–ª—ä—Ç –µ –∑–∞–ø–∏—Å–∞–Ω —É—Å–ø–µ—à–Ω–æ!\n\n"
                               f"üìÅ –§–∞–π–ª: {os.path.basename(file_path)}\n"
                               f"üìä –†–µ–¥–æ–≤–µ: {total_rows}\n"
                               f"üíæ –†–∞–∑–º–µ—Ä: {file_size / 1024:.1f} KB\n"
                               f"üîó –ü—ä—Ç: {file_path}")
            
        except Exception as e:
            messagebox.showerror("–ì—Ä–µ—à–∫–∞", f"–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–≤–∞–Ω–µ –Ω–∞ CSV:\n{str(e)}")
            self.update_status_bar("–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–≤–∞–Ω–µ –Ω–∞ CSV")
    
    def save_json(self):
        """–ó–∞–ø–∏—Å –≤ JSON —Ñ–æ—Ä–º–∞—Ç"""
        if not hasattr(self, 'extracted_data_lines') or len(self.extracted_data_lines) < 2:
            messagebox.showerror("–ì—Ä–µ—à–∫–∞", "–ù—è–º–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏ –¥–∞–Ω–Ω–∏ –∑–∞ –∑–∞–ø–∏—Å!")
            return
        
        file_path = filedialog.asksaveasfilename(
            title="–ó–∞–ø–∏—à–∏ –∫–∞—Ç–æ JSON",
            defaultextension=".json",
            filetypes=[("JSON —Ñ–∞–π–ª–æ–≤–µ", "*.json"), ("–í—Å–∏—á–∫–∏ —Ñ–∞–π–ª–æ–≤–µ", "*.*")]
        )
        
        if not file_path:
            return
        
        try:
            self.update_status_bar("–ó–∞–ø–∏—Å–≤–∞–Ω–µ –Ω–∞ JSON —Ñ–∞–π–ª...")
            
            header_line = self.extracted_data_lines[0]
            header_reader = csv.reader(io.StringIO(header_line))
            headers = next(header_reader)
            
            json_data = []
            
            for line in self.extracted_data_lines[1:]:
                try:
                    reader = csv.reader(io.StringIO(line))
                    fields = next(reader)
                    
                    row_object = {}
                    for i, header in enumerate(headers):
                        if i < len(fields):
                            row_object[header] = fields[i]
                        else:
                            row_object[header] = ""
                    
                    json_data.append(row_object)
                
                except Exception as e:
                    continue
            
            import json
            with open(file_path, 'w', encoding='utf-8') as f:
                json.dump(json_data, f, ensure_ascii=False, indent=2)
            
            total_objects = len(json_data)
            file_size = os.path.getsize(file_path)
            
            self.update_status_bar(f"JSON —Ñ–∞–π–ª –∑–∞–ø–∏—Å–∞–Ω —É—Å–ø–µ—à–Ω–æ: {os.path.basename(file_path)}")
            
            messagebox.showinfo("–£—Å–ø–µ—Ö", 
                               f"JSON —Ñ–∞–π–ª—ä—Ç –µ –∑–∞–ø–∏—Å–∞–Ω —É—Å–ø–µ—à–Ω–æ!\n\n"
                               f"üìÅ –§–∞–π–ª: {os.path.basename(file_path)}\n"
                               f"üìä –û–±–µ–∫—Ç–∏: {total_objects}\n"
                               f"üíæ –†–∞–∑–º–µ—Ä: {file_size / 1024:.1f} KB\n"
                               f"üîó –ü—ä—Ç: {file_path}")
            
        except Exception as e:
            messagebox.showerror("–ì—Ä–µ—à–∫–∞", f"–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–≤–∞–Ω–µ –Ω–∞ JSON:\n{str(e)}")
            self.update_status_bar("–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–≤–∞–Ω–µ –Ω–∞ JSON")
    
    def fix_encoding_utf8_to_windows1251(self, text):
        """
        –ü–æ–ø—Ä–∞–≤—è —Ç–µ–∫—Å—Ç –∏–∑–ø–æ–ª–∑–≤–∞–π–∫–∏ —Ä–∞–±–æ—Ç–µ—â–∏—è –º–µ—Ç–æ–¥: UTF-8‚ÜíLatin-1‚ÜíWindows-1251
        """
        try:
            step1 = text.encode('latin-1', errors='ignore')
            result = step1.decode('windows-1251', errors='ignore')
            return result
        except:
            return text


def main():
    """–ì–ª–∞–≤–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è"""
    root = tk.Tk()
    app = KasiExtractor(root)
    root.mainloop()


if __name__ == "__main__":
    main()