#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Kasi Extractor - GUI –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞ –∏–∑–≤–ª–∏—á–∞–Ω–µ –Ω–∞ –¥–∞–Ω–Ω–∏ –æ—Ç MDB
–ï—Ç–∞–ø 1: –ò–∑–±–æ—Ä –Ω–∞ MDB —Ñ–∞–π–ª + –æ—Å–Ω–æ–≤–Ω–∞ GUI —Å—Ç—Ä—É–∫—Ç—É—Ä–∞
"""

from tkinter import ttk, filedialog, messagebox
# from tkcalendar import DateEntry
from datetime import datetime, date
import tkinter as tk
import subprocess
import json
import csv
import sys
import io
import os

# –£—Å–ª–æ–≤–µ–Ω import –∑–∞ pyodbc (—Å–∞–º–æ –Ω–∞ Windows)
PYODBC_AVAILABLE = False
if sys.platform == "win32":
    try:
        import pyodbc
        PYODBC_AVAILABLE = True
    except ImportError:
        PYODBC_AVAILABLE = False

class KasiExtractor:
    def __init__(self, root):
        self.root = root
        self.root.title("SMS Notification Clients v1.0")
        self.root.geometry("900x700")
        self.root.resizable(True, True)

        self.filtered_data_lines = []  # –ó–∞ –∑–∞–ø–∞–∑–≤–∞–Ω–µ –Ω–∞ —Ñ–∏–ª—Ç—Ä–∏—Ä–∞–Ω–∏—Ç–µ –¥–∞–Ω–Ω–∏
        
        # –ü—Ä–æ–º–µ–Ω–ª–∏–≤–∏
        self.mdb_file_path = tk.StringVar()

        # –ü—Ä–æ–º–µ–Ω–ª–∏–≤–∏ –∑–∞ –¥–∞—Ç–∏
        self.start_date = tk.StringVar()
        self.end_date = tk.StringVar()
        
        # –ó–∞–¥–∞–≤–∞–Ω–µ –Ω–∞ –Ω–∞—á–∞–ª–Ω–∏ –¥–∞—Ç–∏ (–ø–æ—Å–ª–µ–¥–Ω–∏—Ç–µ 30 –¥–Ω–∏)
        today = date.today()
        month_ago = date(today.year, today.month-1 if today.month > 1 else 12, today.day)
        self.start_date.set(month_ago.strftime('%d.%m.%Y'))
        self.end_date.set(today.strftime('%d.%m.%Y'))
        
        # –°—ä–∑–¥–∞–≤–∞–Ω–µ –Ω–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        self.create_widgets()

        # –ó–∞–¥–∞–≤–∞–º–µ –¥–Ω–µ—à–Ω–∏ –¥–∞—Ç–∏ –∫–∞—Ç–æ –ø–æ –ø–æ–¥—Ä–∞–∑–±–∏—Ä–∞–Ω–µ
        self.set_default_dates()

    def validate_date_input(self, date_string):
        """–í–∞–ª–∏–¥–∏—Ä–∞ –¥–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç dd.mm.yyyy"""
        if not date_string.strip():
            return "empty"  # –ü—Ä–∞–∑–Ω–æ –ø–æ–ª–µ
        
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—ä–ª–∂–∏–Ω–∞—Ç–∞
            if len(date_string) != 10:
                return "invalid"
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ñ–æ—Ä–º–∞—Ç–∞ —Å —Ç–æ—á–∫–∏
            if date_string.count('.') != 2:
                return "invalid"
            
            # –ü–∞—Ä—Å–∏—Ä–∞–Ω–µ –Ω–∞ –¥–∞—Ç–∞—Ç–∞
            datetime.strptime(date_string, '%d.%m.%Y')
            return "valid"
        except ValueError:
            return "invalid"

    def validate_date_range(self):
        """–ü—Ä–æ–≤–µ—Ä—è–≤–∞ –¥–∞–ª–∏ –∫—Ä–∞–π–Ω–∞—Ç–∞ –¥–∞—Ç–∞ –µ —Å–ª–µ–¥ –Ω–∞—á–∞–ª–Ω–∞—Ç–∞"""
        start_text = self.start_date_entry.get().strip()
        end_text = self.end_date_entry.get().strip()
        
        # –ê–∫–æ –Ω—è–∫–æ–µ –ø–æ–ª–µ –µ –ø—Ä–∞–∑–Ω–æ, –Ω–µ –ø—Ä–æ–≤–µ—Ä—è–≤–∞–º–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª–Ω–æ—Å—Ç—Ç–∞
        if not start_text or not end_text:
            return True
        
        # –ê–∫–æ –Ω—è–∫–æ—è –¥–∞—Ç–∞ –µ –Ω–µ–≤–∞–ª–∏–¥–Ω–∞, –Ω–µ –ø—Ä–æ–≤–µ—Ä—è–≤–∞–º–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª–Ω–æ—Å—Ç—Ç–∞  
        if (self.validate_date_input(start_text) != "valid" or 
            self.validate_date_input(end_text) != "valid"):
            return True
        
        try:
            start_date = datetime.strptime(start_text, '%d.%m.%Y')
            end_date = datetime.strptime(end_text, '%d.%m.%Y')
            return start_date <= end_date
        except:
            return True

    def on_date_entry_change(self, event, entry_widget):
        """–ü—Ä–æ–≤–µ—Ä—è–≤–∞ –¥–∞—Ç–∞—Ç–∞ –ø—Ä–∏ –ø—Ä–æ–º—è–Ω–∞ –≤ Entry –ø–æ–ª–µ—Ç–æ"""
        date_text = entry_widget.get()
        validation_result = self.validate_date_input(date_text)
        
        # –ü—ä—Ä–≤–æ –ø—Ä–æ–≤–µ—Ä—è–≤–∞–º–µ —Ñ–æ—Ä–º–∞—Ç–∞ –Ω–∞ –¥–∞—Ç–∞—Ç–∞
        if validation_result == "valid":
            entry_widget.config(bg="lightgreen")  # –ó–µ–ª–µ–Ω —Ñ–æ–Ω –∑–∞ –≤–∞–ª–∏–¥–Ω–∞ –¥–∞—Ç–∞
        elif validation_result == "empty":
            entry_widget.config(bg="white")  # –ë—è–ª —Ñ–æ–Ω –∑–∞ –ø—Ä–∞–∑–Ω–æ –ø–æ–ª–µ
        else:
            entry_widget.config(bg="lightcoral")  # –ß–µ—Ä–≤–µ–Ω —Ñ–æ–Ω –∑–∞ –Ω–µ–≤–∞–ª–∏–¥–Ω–∞ –¥–∞—Ç–∞
            return
        
        # –ê–∫–æ –¥–∞—Ç–∞—Ç–∞ –µ –≤–∞–ª–∏–¥–Ω–∞, –ø—Ä–æ–≤–µ—Ä—è–≤–∞–º–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª–Ω–æ—Å—Ç—Ç–∞
        if validation_result == "valid":
            if not self.validate_date_range():
                # –ê–∫–æ –∫—Ä–∞–π–Ω–∞—Ç–∞ –¥–∞—Ç–∞ –µ –ø—Ä–µ–¥–∏ –Ω–∞—á–∞–ª–Ω–∞—Ç–∞, –ø—Ä–∞–≤–∏–º —Ñ–æ–Ω–∞ –æ—Ä–∞–Ω–∂–µ–≤
                self.start_date_entry.config(bg="orange")
                self.end_date_entry.config(bg="orange")
                self.update_status_bar("–ì–†–ï–®–ö–ê: –ö—Ä–∞–π–Ω–∞—Ç–∞ –¥–∞—Ç–∞ –µ –ø—Ä–µ–¥–∏ –Ω–∞—á–∞–ª–Ω–∞—Ç–∞!")
            else:
                # –ê–∫–æ –≤—Å–∏—á–∫–æ –µ –Ω–∞—Ä–µ–¥, –≤—ä–∑—Å—Ç–∞–Ω–æ–≤—è–≤–∞–º–µ –∑–µ–ª–µ–Ω–∏—è —Ü–≤—è—Ç
                if self.validate_date_input(self.start_date_entry.get()) == "valid":
                    self.start_date_entry.config(bg="lightgreen")
                if self.validate_date_input(self.end_date_entry.get()) == "valid":
                    self.end_date_entry.config(bg="lightgreen")
                self.update_status_bar("–ì–æ—Ç–æ–≤ –∑–∞ —Ä–∞–±–æ—Ç–∞")
            
    def create_widgets(self):
        """–°—ä–∑–¥–∞–≤–∞ –≤—Å–∏—á–∫–∏ UI –µ–ª–µ–º–µ–Ω—Ç–∏"""
        
        # –ì–ª–∞–≤–Ω–∞ —Ä–∞–º–∫–∞
        main_frame = ttk.Frame(self.root, padding="10")
        main_frame.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–∞ grid
        self.root.columnconfigure(0, weight=1)
        self.root.rowconfigure(0, weight=1)
        main_frame.columnconfigure(1, weight=1)
        
        # 1. –°–ï–ö–¶–ò–Ø: –ò–ó–ë–û–† –ù–ê MDB –§–ê–ô–õ
        file_frame = ttk.LabelFrame(main_frame, text="üìÅ –ò–∑–±–æ—Ä –Ω–∞ MDB —Ñ–∞–π–ª", padding="10")
        file_frame.grid(row=0, column=0, columnspan=2, sticky=(tk.W, tk.E), pady=(0, 10))
        file_frame.columnconfigure(1, weight=1)
        
        # –ë—É—Ç–æ–Ω –∑–∞ –∏–∑–±–æ—Ä –Ω–∞ —Ñ–∞–π–ª
        ttk.Button(file_frame, text="–ò–∑–±–µ—Ä–∏ MDB —Ñ–∞–π–ª", 
                  command=self.select_mdb_file).grid(row=0, column=0, padx=(0, 10))
        
        # –ü–æ–ª–µ –∑–∞ –ø–æ–∫–∞–∑–≤–∞–Ω–µ –Ω–∞ –∏–∑–±—Ä–∞–Ω–∏—è —Ñ–∞–π–ª
        self.file_entry = ttk.Entry(file_frame, textvariable=self.mdb_file_path, 
                                   state="readonly", width=50)
        self.file_entry.grid(row=0, column=1, sticky=(tk.W, tk.E))
        
        # 2. –°–ï–ö–¶–ò–Ø: –°–¢–ê–¢–£–° –ù–ê –§–ê–ô–õ–ê
        status_frame = ttk.LabelFrame(main_frame, text="üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∑–∞ —Ñ–∞–π–ª–∞", padding="10")
        status_frame.grid(row=1, column=0, columnspan=2, sticky=(tk.W, tk.E), pady=(0, 10))
        status_frame.columnconfigure(0, weight=1)
        
        # –°—Ç–∞—Ç—É—Å –ª–µ–π–±—ä–ª
        self.status_label = ttk.Label(status_frame, text="–ù—è–º–∞ –∏–∑–±—Ä–∞–Ω —Ñ–∞–π–ª", 
                                     foreground="gray")
        self.status_label.grid(row=0, column=0, sticky=tk.W)
        
        # 3. –°–ï–ö–¶–ò–Ø: –¢–ï–°–¢ –ù–ê –í–†–™–ó–ö–ê–¢–ê (–≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞ —Ç–µ—Å—Ç–≤–∞–Ω–µ)
        test_frame = ttk.LabelFrame(main_frame, text="üîß –¢–µ—Å—Ç–≤–∞–Ω–µ", padding="10")
        test_frame.grid(row=2, column=0, columnspan=2, sticky=(tk.W, tk.E), pady=(0, 10))
        
        # –ë—É—Ç–æ–Ω –∑–∞ —Ç–µ—Å—Ç –Ω–∞ —Ç–∞–±–ª–∏—Ü–∏
        self.test_button = ttk.Button(test_frame, text="–¢–µ—Å—Ç–≤–∞–π –≤—Ä—ä–∑–∫–∞ —Å –±–∞–∑–∞—Ç–∞", 
                                     command=self.test_database_connection, 
                                     state="disabled")
        self.test_button.grid(row=0, column=0, padx=(0, 10))
        
        # 4. –°–ï–ö–¶–ò–Ø: –°–¢–ê–¢–£–° –ë–ê–† (–¥–æ–ª—É)
        status_bar_frame = ttk.Frame(main_frame)
        status_bar_frame.grid(row=10, column=0, columnspan=2, sticky=(tk.W, tk.E), pady=(20, 0))
        status_bar_frame.columnconfigure(0, weight=1)

        # 5. –°–ï–ö–¶–ò–Ø: –ò–ó–ë–û–† –ù–ê –î–ê–¢–ò –ó–ê –§–ò–õ–¢–†–ò–†–ê–ù–ï
        date_frame = ttk.LabelFrame(main_frame, text="üìÖ –§–∏–ª—Ç—Ä–∏—Ä–∞–Ω–µ –ø–æ –¥–∞—Ç–∏", padding="10")
        date_frame.grid(row=3, column=0, columnspan=2, sticky=(tk.W, tk.E), pady=(0, 10))
        date_frame.columnconfigure(1, weight=1)
        date_frame.columnconfigure(3, weight=1)
        
        # –û—Ç –¥–∞—Ç–∞
        ttk.Label(date_frame, text="–û—Ç –¥–∞—Ç–∞:").grid(row=0, column=0, padx=(0, 5), sticky=tk.W)
        self.start_date_entry = tk.Entry(date_frame, width=12)
        self.start_date_entry.grid(row=0, column=1, padx=(0, 20), sticky=tk.W)
        # –î–æ–±–∞–≤–∏ event binding –∑–∞ real-time validation
        self.start_date_entry.bind('<KeyRelease>', lambda e: self.on_date_entry_change(e, self.start_date_entry))

        # –î–æ –¥–∞—Ç–∞
        ttk.Label(date_frame, text="–î–æ –¥–∞—Ç–∞:").grid(row=0, column=2, padx=(0, 5), sticky=tk.W)
        self.end_date_entry = tk.Entry(date_frame, width=12)
        self.end_date_entry.grid(row=0, column=3, padx=(0, 20), sticky=tk.W)
        # –î–æ–±–∞–≤–∏ event binding –∑–∞ real-time validation
        self.end_date_entry.bind('<KeyRelease>', lambda e: self.on_date_entry_change(e, self.end_date_entry))
        
        # –ë—É—Ç–æ–Ω –∑–∞ —Ñ–∏–ª—Ç—Ä–∏—Ä–∞–Ω–µ
        self.filter_button = ttk.Button(date_frame, text="üìä –§–∏–ª—Ç—Ä–∏—Ä–∞–π –¥–∞–Ω–Ω–∏—Ç–µ", 
                                       command=self.filter_data, state="disabled")
        self.filter_button.grid(row=0, column=4, padx=(20, 0))
        
        # –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ —Å –ø—Ä–∏–º–µ—Ä
        instruction_label = ttk.Label(date_frame, text="–§–æ—Ä–º–∞—Ç: dd.mm.yyyy (–Ω–∞–ø—Ä–∏–º–µ—Ä: 10.09.2025)", 
                                     foreground="gray", font=("TkDefaultFont", 8))
        instruction_label.grid(row=1, column=0, columnspan=4, pady=(5, 0), sticky=tk.W)
        
        # –†–µ–∑—É–ª—Ç–∞—Ç –æ—Ç —Ñ–∏–ª—Ç—Ä–∏—Ä–∞–Ω–µ—Ç–æ
        self.filter_result_label = ttk.Label(date_frame, text="", foreground="gray")
        self.filter_result_label.grid(row=2, column=0, columnspan=5, pady=(10, 0), sticky=tk.W)

        # # 5. –°–ï–ö–¶–ò–Ø: –ò–ó–ë–û–† –ù–ê –î–ê–¢–ò –ó–ê –§–ò–õ–¢–†–ò–†–ê–ù–ï –° –ö–ê–õ–ï–ù–î–ê–†–ò
        # date_frame = ttk.LabelFrame(main_frame, text="üìÖ –§–∏–ª—Ç—Ä–∏—Ä–∞–Ω–µ –ø–æ –¥–∞—Ç–∏", padding="10")
        # date_frame.grid(row=3, column=0, columnspan=2, sticky=(tk.W, tk.E), pady=(0, 10))
        
        # # –°—ä–∑–¥–∞–≤–∞–º–µ –≤—ä—Ç—Ä–µ—à–Ω–∞ —Ä–∞–º–∫–∞ –∑–∞ –ø–æ-–¥–æ–±—Ä–æ –ø–æ–¥—Ä–µ–∂–¥–∞–Ω–µ
        # inner_frame = ttk.Frame(date_frame)
        # inner_frame.grid(row=0, column=0, sticky=(tk.W, tk.E))
        # inner_frame.columnconfigure(1, weight=1)
        # inner_frame.columnconfigure(3, weight=1)
        
        # # –û—Ç –¥–∞—Ç–∞
        # ttk.Label(inner_frame, text="–û—Ç –¥–∞—Ç–∞:").grid(row=0, column=0, padx=(0, 10), sticky=tk.W)
        # try:
        #     self.start_date_entry = DateEntry(inner_frame, width=12, 
        #                                      date_pattern='dd.mm.yyyy',
        #                                      state='readonly')
        #     self.start_date_entry.grid(row=0, column=1, padx=(0, 30), sticky=tk.W)
        # except Exception as e:
        #     print(f"–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ —Å—ä–∑–¥–∞–≤–∞–Ω–µ –Ω–∞ –ø—ä—Ä–≤–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä: {e}")
        
        # # –î–æ –¥–∞—Ç–∞  
        # ttk.Label(inner_frame, text="–î–æ –¥–∞—Ç–∞:").grid(row=0, column=2, padx=(0, 10), sticky=tk.W)
        # try:
        #     self.end_date_entry = DateEntry(inner_frame, width=12,
        #                                    date_pattern='dd.mm.yyyy',
        #                                    state='readonly')
        #     self.end_date_entry.grid(row=0, column=3, padx=(0, 30), sticky=tk.W)
        # except Exception as e:
        #     print(f"–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ —Å—ä–∑–¥–∞–≤–∞–Ω–µ –Ω–∞ –≤—Ç–æ—Ä–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä: {e}")
        
        # # –ë—É—Ç–æ–Ω –∑–∞ —Ñ–∏–ª—Ç—Ä–∏—Ä–∞–Ω–µ –Ω–∞ –Ω–æ–≤ —Ä–µ–¥
        # button_frame = ttk.Frame(date_frame)
        # button_frame.grid(row=1, column=0, sticky=(tk.W, tk.E), pady=(10, 0))
        
        # self.filter_button = ttk.Button(button_frame, text="üìä –§–∏–ª—Ç—Ä–∏—Ä–∞–π –¥–∞–Ω–Ω–∏—Ç–µ", 
        #                                command=self.filter_data, state="disabled")
        # self.filter_button.grid(row=0, column=0, sticky=tk.W)
        
        # # –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
        # instruction_label = ttk.Label(button_frame, text="‚Üê –ù–∞—Ç–∏—Å–Ω–µ—Ç–µ –Ω–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä–∞ –∑–∞ –∏–∑–±–æ—Ä –Ω–∞ –¥–∞—Ç–∞", 
        #                              foreground="gray", font=("TkDefaultFont", 8))
        # instruction_label.grid(row=0, column=1, padx=(20, 0), sticky=tk.W)
        
        # # –†–µ–∑—É–ª—Ç–∞—Ç –æ—Ç —Ñ–∏–ª—Ç—Ä–∏—Ä–∞–Ω–µ—Ç–æ
        # self.filter_result_label = ttk.Label(date_frame, text="", foreground="gray")
        # self.filter_result_label.grid(row=2, column=0, pady=(10, 0), sticky=tk.W)

        # # 5. –°–ï–ö–¶–ò–Ø: –ò–ó–ë–û–† –ù–ê –î–ê–¢–ò –ó–ê –§–ò–õ–¢–†–ò–†–ê–ù–ï
        # date_frame = ttk.LabelFrame(main_frame, text="üìÖ –§–∏–ª—Ç—Ä–∏—Ä–∞–Ω–µ –ø–æ –¥–∞—Ç–∏", padding="10")
        # date_frame.grid(row=3, column=0, columnspan=2, sticky=(tk.W, tk.E), pady=(0, 10))
        # date_frame.columnconfigure(1, weight=1)
        # date_frame.columnconfigure(3, weight=1)
        
        # # –û—Ç –¥–∞—Ç–∞
        # ttk.Label(date_frame, text="–û—Ç –¥–∞—Ç–∞ (dd.mm.yyyy):").grid(row=0, column=0, padx=(0, 5), sticky=tk.W)
        # self.start_date_entry = ttk.Entry(date_frame, width=12)
        # self.start_date_entry.grid(row=0, column=1, padx=(0, 20), sticky=tk.W)
        # self.start_date_entry.insert(0, "01.04.2009")  # –ü—Ä–∏–º–µ—Ä–Ω–∞ –Ω–∞—á–∞–ª–Ω–∞ –¥–∞—Ç–∞
        
        # # –î–æ –¥–∞—Ç–∞
        # ttk.Label(date_frame, text="–î–æ –¥–∞—Ç–∞ (dd.mm.yyyy):").grid(row=0, column=2, padx=(0, 5), sticky=tk.W)
        # self.end_date_entry = ttk.Entry(date_frame, width=12)
        # self.end_date_entry.grid(row=0, column=3, padx=(0, 20), sticky=tk.W)
        # self.end_date_entry.insert(0, "31.12.2009")  # –ü—Ä–∏–º–µ—Ä–Ω–∞ –∫—Ä–∞–π–Ω–∞ –¥–∞—Ç–∞
        
        # # –ë—É—Ç–æ–Ω –∑–∞ —Ñ–∏–ª—Ç—Ä–∏—Ä–∞–Ω–µ
        # self.filter_button = ttk.Button(date_frame, text="üìä –§–∏–ª—Ç—Ä–∏—Ä–∞–π –¥–∞–Ω–Ω–∏—Ç–µ", 
        #                                command=self.filter_data, state="disabled")
        # self.filter_button.grid(row=0, column=4, padx=(20, 0))
        
        # # –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
        # instruction_label = ttk.Label(date_frame, text="–§–æ—Ä–º–∞—Ç: dd.mm.yyyy (–Ω–∞–ø—Ä–∏–º–µ—Ä: 01.08.2025)", 
        #                              foreground="gray", font=("TkDefaultFont", 8))
        # instruction_label.grid(row=1, column=0, columnspan=4, pady=(5, 0), sticky=tk.W)
        
        # # –†–µ–∑—É–ª—Ç–∞—Ç –æ—Ç —Ñ–∏–ª—Ç—Ä–∏—Ä–∞–Ω–µ—Ç–æ
        # self.filter_result_label = ttk.Label(date_frame, text="", foreground="gray")
        # self.filter_result_label.grid(row=2, column=0, columnspan=5, pady=(10, 0), sticky=tk.W)

        # 6. –°–ï–ö–¶–ò–Ø: –ò–ó–í–õ–ò–ß–ê–ù–ï –ù–ê –ö–û–ù–ö–†–ï–¢–ù–ò –ö–û–õ–û–ù–ò
        extract_frame = ttk.LabelFrame(main_frame, text="üìã –ò–∑–≤–ª–∏—á–∞–Ω–µ –Ω–∞ –¥–∞–Ω–Ω–∏", padding="10")
        extract_frame.grid(row=4, column=0, columnspan=2, sticky=(tk.W, tk.E), pady=(0, 10))
        extract_frame.columnconfigure(0, weight=1)
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∑–∞ –∫–æ–ª–æ–Ω–∏—Ç–µ
        info_label = ttk.Label(extract_frame, 
                              text="–ö–æ–ª–æ–Ω–∏ –∑–∞ –∏–∑–≤–ª–∏—á–∞–Ω–µ: Number, End_Data, Model, Number_EKA, Ime_Obekt, Adres_Obekt, Dan_Number, Phone, Ime_Firma, bulst",
                              foreground="gray", font=("TkDefaultFont", 8), wraplength=500)
        info_label.grid(row=0, column=0, columnspan=3, sticky=(tk.W, tk.E), pady=(0, 10))
        
        # –ë—É—Ç–æ–Ω –∑–∞ –∏–∑–≤–ª–∏—á–∞–Ω–µ
        self.extract_button = ttk.Button(extract_frame, text="üìä –ò–∑–≤–ª–µ—á–∏ –∫–æ–ª–æ–Ω–∏", 
                                        command=self.extract_specific_columns, state="disabled")
        self.extract_button.grid(row=1, column=0, padx=(0, 10))
        
        # –ë—É—Ç–æ–Ω–∏ –∑–∞ –∑–∞–ø–∏—Å (–Ω–µ–∞–∫—Ç–∏–≤–Ω–∏ –¥–æ –∏–∑–≤–ª–∏—á–∞–Ω–µ)
        self.save_csv_button = ttk.Button(extract_frame, text="üíæ –ó–∞–ø–∏—à–∏ CSV", 
                                         command=self.save_csv, state="disabled")
        self.save_csv_button.grid(row=1, column=1, padx=(0, 10))
        
        self.save_json_button = ttk.Button(extract_frame, text="üíæ –ó–∞–ø–∏—à–∏ JSON", 
                                          command=self.save_json, state="disabled")
        self.save_json_button.grid(row=1, column=2)

        # 7. –°–ï–ö–¶–ò–Ø: –ü–™–õ–ï–ù –ï–ö–°–ü–û–†–¢ –ù–ê –¢–ê–ë–õ–ò–¶–ê
        export_frame = ttk.LabelFrame(main_frame, text="üì§ –ü—ä–ª–µ–Ω –µ–∫—Å–ø–æ—Ä—Ç", padding="10")
        export_frame.grid(row=5, column=0, columnspan=2, sticky=(tk.W, tk.E), pady=(0, 10))
        export_frame.columnconfigure(0, weight=1)
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        export_info_label = ttk.Label(export_frame, 
                                     text="–ï–∫—Å–ø–æ—Ä—Ç–∏—Ä–∞–Ω–µ –Ω–∞ —Ü—è–ª–∞—Ç–∞ —Ç–∞–±–ª–∏—Ü–∞ Kasi_all (–≤—Å–∏—á–∫–∏ –∫–æ–ª–æ–Ω–∏, –≤—Å–∏—á–∫–∏ —Ä–µ–¥–æ–≤–µ)",
                                     foreground="gray", font=("TkDefaultFont", 8))
        export_info_label.grid(row=0, column=0, sticky=tk.W, pady=(0, 10))
        
        # –ë—É—Ç–æ–Ω –∑–∞ –ø—ä–ª–µ–Ω –µ–∫—Å–ø–æ—Ä—Ç
        self.full_export_button = ttk.Button(export_frame, text="üìÅ –ï–∫—Å–ø–æ—Ä—Ç–∏—Ä–∞–π —Ü—è–ª–∞ —Ç–∞–±–ª–∏—Ü–∞", 
                                            command=self.export_full_table, state="disabled")
        self.full_export_button.grid(row=1, column=0, sticky=tk.W)
        
        # –†–µ–∑—É–ª—Ç–∞—Ç –æ—Ç –∏–∑–≤–ª–∏—á–∞–Ω–µ—Ç–æ
        self.extract_result_label = ttk.Label(extract_frame, text="", foreground="gray")
        self.extract_result_label.grid(row=2, column=0, columnspan=3, pady=(10, 0), sticky=tk.W)
        
        # –°—Ç–∞—Ç—É—Å –±–∞—Ä
        self.status_bar = ttk.Label(status_bar_frame, text="–ì–æ—Ç–æ–≤ –∑–∞ —Ä–∞–±–æ—Ç–∞", 
                                   relief=tk.SUNKEN, anchor=tk.W, padding="5")
        self.status_bar.grid(row=0, column=0, sticky=(tk.W, tk.E))
        
        # –ë—É—Ç–æ–Ω –∑–∞ –∏–∑—Ö–æ–¥
        ttk.Button(status_bar_frame, text="–ò–∑—Ö–æ–¥", 
                  command=self.exit_application).grid(row=0, column=1, padx=(10, 0))
    
    def set_default_dates(self):
        """–ó–∞–¥–∞–≤–∞ –¥–Ω–µ—à–Ω–∞ –¥–∞—Ç–∞ –∫–∞—Ç–æ –ø–µ—Ä–∏–æ–¥ –ø–æ –ø–æ–¥—Ä–∞–∑–±–∏—Ä–∞–Ω–µ"""
        try:
            from datetime import date
            today = date.today()
            today_str = today.strftime('%d.%m.%Y')
            
            # –ó–∞–¥–∞–≤–∞–º–µ –¥–Ω–µ—à–Ω–∞—Ç–∞ –¥–∞—Ç–∞ –≤ –¥–≤–µ—Ç–µ –ø–æ–ª–µ—Ç–∞
            self.start_date_entry.delete(0, tk.END)
            self.start_date_entry.insert(0, today_str)
            
            self.end_date_entry.delete(0, tk.END)
            self.end_date_entry.insert(0, today_str)
            
            self.update_status_bar(f"–ó–∞–¥–∞–¥–µ–Ω –µ –ø–µ—Ä–∏–æ–¥: {today_str} - {today_str}")
            
        except Exception as e:
            print(f"–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –ù–µ –º–æ–∂–∞—Ö –¥–∞ –∑–∞–¥–∞–º –Ω–∞—á–∞–ª–Ω–∏—Ç–µ –¥–∞—Ç–∏: {e}")
            self.update_status_bar("–ì–æ—Ç–æ–≤ –∑–∞ —Ä–∞–±–æ—Ç–∞")

    def select_mdb_file(self):
        """–û—Ç–≤–∞—Ä—è –¥–∏–∞–ª–æ–≥ –∑–∞ –∏–∑–±–æ—Ä –Ω–∞ MDB —Ñ–∞–π–ª"""
        file_path = filedialog.askopenfilename(
            title="–ò–∑–±–µ—Ä–∏ MDB —Ñ–∞–π–ª",
            filetypes=[
                ("MDB —Ñ–∞–π–ª–æ–≤–µ", "*.mdb"),
                ("–í—Å–∏—á–∫–∏ —Ñ–∞–π–ª–æ–≤–µ", "*.*")
            ]
        )
        
        if file_path:
            self.mdb_file_path.set(file_path)
            self.update_file_status(file_path)
            self.update_status_bar(f"–ò–∑–±—Ä–∞–Ω —Ñ–∞–π–ª: {os.path.basename(file_path)}")
    
    def update_file_status(self, file_path):
        """–û–±–Ω–æ–≤—è–≤–∞ —Å—Ç–∞—Ç—É—Å–∞ –Ω–∞ –∏–∑–±—Ä–∞–Ω–∏—è —Ñ–∞–π–ª"""
        if os.path.exists(file_path):
            file_size = os.path.getsize(file_path)
            size_mb = file_size / (1024 * 1024)
            
            status_text = f"‚úÖ –§–∞–π–ª: {os.path.basename(file_path)} ({size_mb:.1f} MB)"
            self.status_label.config(text=status_text, foreground="green")
            
            # –ê–∫—Ç–∏–≤–∏—Ä–∞–º–µ –±—É—Ç–æ–Ω–∏—Ç–µ
            self.test_button.config(state="normal")
            self.filter_button.config(state="normal")
            self.full_export_button.config(state="normal")
        else:
            self.status_label.config(text="‚ùå –§–∞–π–ª—ä—Ç –Ω–µ —Å—ä—â–µ—Å—Ç–≤—É–≤–∞", foreground="red")
            self.test_button.config(state="disabled")
    
    def test_database_connection(self):
        """–¢–µ—Å—Ç–≤–∞ –≤—Ä—ä–∑–∫–∞—Ç–∞ —Å –±–∞–∑–∞—Ç–∞ –¥–∞–Ω–Ω–∏ –∏ –ø–æ–∫–∞–∑–≤–∞ —Ç–∞–±–ª–∏—Ü–∏—Ç–µ"""
        if not self.mdb_file_path.get():
            messagebox.showerror("–ì—Ä–µ—à–∫–∞", "–ú–æ–ª—è –∏–∑–±–µ—Ä–µ—Ç–µ MDB —Ñ–∞–π–ª –ø—ä—Ä–≤–æ!")
            return
        
        self.update_status_bar("–¢–µ—Å—Ç–≤–∞–Ω–µ –Ω–∞ –≤—Ä—ä–∑–∫–∞—Ç–∞ —Å –±–∞–∑–∞—Ç–∞...")
        
        # –ù–∞ Windows –∏–∑–ø–æ–ª–∑–≤–∞–º–µ pyodbc, –Ω–∞ Linux - mdb-tools
        if sys.platform == "win32" and PYODBC_AVAILABLE:
            self._test_with_pyodbc()
        else:
            self._test_with_mdb_tools()

    def _test_with_pyodbc(self):
        import pyodbc  # Local import —Å–∞–º–æ –∫–æ–≥–∞—Ç–æ –µ –Ω—É–∂–Ω–æ
        """–¢–µ—Å—Ç —Å pyodbc –∑–∞ Windows"""
        try:
            # –û–ø–∏—Ç–≤–∞–º–µ —Ä–∞–∑–ª–∏—á–Ω–∏ –¥—Ä–∞–π–≤–µ—Ä–∏ –ø–æ —Ä–µ–¥–∞ –Ω–∞ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
            driver_options = [
                'Microsoft Access Driver (*.mdb, *.accdb)',
                'Microsoft Access Driver (*.mdb)',
                'Microsoft Access Driver (*.accdb)',
                'Microsoft Office Access Driver (*.mdb, *.accdb)',
                'Microsoft Office 16.0 Access Database Engine OLE DB Provider'
            ]

            conn = None
            for driver in driver_options:
                try:
                    conn_str = f'DRIVER={{{driver}}};DBQ={self.mdb_file_path.get()};'
                    conn = pyodbc.connect(conn_str)
                    break  # –ê–∫–æ —É—Å–ø–µ–µ, —Å–ø–∏—Ä–∞–º–µ —Ç—É–∫
                except:
                    continue  # –û–ø–∏—Ç–≤–∞–º–µ —Å–ª–µ–¥–≤–∞—â–∏—è –¥—Ä–∞–π–≤–µ—Ä

            if conn is None:
                raise Exception("–ù–µ –º–æ–∂–µ –¥–∞ —Å–µ –Ω–∞–º–µ—Ä–∏ –ø–æ–¥—Ö–æ–¥—è—â Access –¥—Ä–∞–π–≤–µ—Ä")
            conn = pyodbc.connect(conn_str)
            cursor = conn.cursor()
            
            tables = [table_info.table_name for table_info in cursor.tables(tableType='TABLE')]
            conn.close()
            
            self._show_tables_result(tables)
            
        except Exception as e:
            messagebox.showerror("–ì—Ä–µ—à–∫–∞", f"–ù–µ –º–æ–∂–∞—Ö –¥–∞ —Å–µ —Å–≤—ä—Ä–∂–∞ —Å –±–∞–∑–∞—Ç–∞:\n{str(e)}")
            self.update_status_bar("–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ —Å–≤—ä—Ä–∑–≤–∞–Ω–µ —Å –±–∞–∑–∞—Ç–∞")

    def _test_with_mdb_tools(self):
        """–¢–µ—Å—Ç —Å mdb-tools –∑–∞ Linux"""
        try:
            result = subprocess.run(["mdb-tables", self.mdb_file_path.get()], 
                                capture_output=True, text=True)
            
            if result.returncode != 0:
                messagebox.showerror("–ì—Ä–µ—à–∫–∞", f"–ù–µ –º–æ–∂–∞—Ö –¥–∞ —á–µ—Ç–∞ –±–∞–∑–∞—Ç–∞:\n{result.stderr}")
                return
            
            tables = result.stdout.strip().split()
            self._show_tables_result(tables)
            
        except FileNotFoundError:
            messagebox.showerror("–ì—Ä–µ—à–∫–∞", "mdb-tools –Ω–µ –µ –Ω–∞–º–µ—Ä–µ–Ω!")
            self.update_status_bar("–ì—Ä–µ—à–∫–∞: mdb-tools –Ω–µ –µ –∏–Ω—Å—Ç–∞–ª–∏—Ä–∞–Ω")

    def _show_tables_result(self, tables):
        """–ü–æ–∫–∞–∑–≤–∞ —Ä–µ–∑—É–ª—Ç–∞—Ç–∞ –æ—Ç –Ω–∞–º–µ—Ä–µ–Ω–∏—Ç–µ —Ç–∞–±–ª–∏—Ü–∏"""
        if "Kasi_all" in tables:
            messagebox.showinfo("–£—Å–ø–µ—Ö", 
                            f"‚úÖ –í—Ä—ä–∑–∫–∞—Ç–∞ –µ —É—Å–ø–µ—à–Ω–∞!\n\n"
                            f"–ù–∞–º–µ—Ä–µ–Ω–∏ —Ç–∞–±–ª–∏—Ü–∏: {len(tables)}\n"
                            f"–¢–∞–±–ª–∏—Ü–∞ 'Kasi_all': ‚úÖ –ù–∞–º–µ—Ä–µ–Ω–∞")
            self.update_status_bar("‚úÖ –ë–∞–∑–∞—Ç–∞ –µ –≥–æ—Ç–æ–≤–∞ –∑–∞ —Ä–∞–±–æ—Ç–∞")
        else:
            messagebox.showwarning("–í–Ω–∏–º–∞–Ω–∏–µ", 
                                f"–¢–∞–±–ª–∏—Ü–∞ 'Kasi_all' –Ω–µ –µ –Ω–∞–º–µ—Ä–µ–Ω–∞!\n\n"
                                f"–ù–∞–ª–∏—á–Ω–∏ —Ç–∞–±–ª–∏—Ü–∏:\n" + "\n".join(tables))
            self.update_status_bar("‚ö†Ô∏è –¢–∞–±–ª–∏—Ü–∞ 'Kasi_all' –Ω–µ –µ –Ω–∞–º–µ—Ä–µ–Ω–∞")

    # def test_database_connection(self):
    #     """–¢–µ—Å—Ç–≤–∞ –≤—Ä—ä–∑–∫–∞—Ç–∞ —Å –±–∞–∑–∞—Ç–∞ –¥–∞–Ω–Ω–∏ –∏ –ø–æ–∫–∞–∑–≤–∞ —Ç–∞–±–ª–∏—Ü–∏—Ç–µ"""
    #     if not self.mdb_file_path.get():
    #         messagebox.showerror("–ì—Ä–µ—à–∫–∞", "–ú–æ–ª—è –∏–∑–±–µ—Ä–µ—Ç–µ MDB —Ñ–∞–π–ª –ø—ä—Ä–≤–æ!")
    #         return
        
    #     self.update_status_bar("–¢–µ—Å—Ç–≤–∞–Ω–µ –Ω–∞ –≤—Ä—ä–∑–∫–∞—Ç–∞ —Å –±–∞–∑–∞—Ç–∞...")
        
    #     try:
    #         # –ü—Ä–æ–≤–µ—Ä—è–≤–∞–º–µ –¥–∞–ª–∏ mdb-tables –µ –∏–Ω—Å—Ç–∞–ª–∏—Ä–∞–Ω
    #         result = subprocess.run(["mdb-tables", "--help"], 
    #                                capture_output=True, text=True)
    #         if result.returncode != 0:
    #             raise FileNotFoundError("mdb-tables –Ω–µ —Ä–∞–±–æ—Ç–∏")
    #     except FileNotFoundError:
    #         messagebox.showerror("–ì—Ä–µ—à–∫–∞", 
    #                            "mdb-tools –Ω–µ –µ –Ω–∞–º–µ—Ä–µ–Ω!\n\n"
    #                            "–ú–æ–ª—è –∏–Ω—Å—Ç–∞–ª–∏—Ä–∞–π—Ç–µ mdb-tools:\n"
    #                            "- Windows: choco install mdb-tools\n"
    #                            "- Ubuntu: sudo apt-get install mdb-tools")
    #         self.update_status_bar("–ì—Ä–µ—à–∫–∞: mdb-tools –Ω–µ –µ –∏–Ω—Å—Ç–∞–ª–∏—Ä–∞–Ω")
    #         return
        
    #     try:
    #         # –°–ø–∏—Å—ä–∫ –Ω–∞ —Ç–∞–±–ª–∏—Ü–∏—Ç–µ
    #         result = subprocess.run(["mdb-tables", self.mdb_file_path.get()], 
    #                                capture_output=True, text=True)
            
    #         if result.returncode != 0:
    #             messagebox.showerror("–ì—Ä–µ—à–∫–∞", f"–ù–µ –º–æ–∂–∞—Ö –¥–∞ —á–µ—Ç–∞ –±–∞–∑–∞—Ç–∞:\n{result.stderr}")
    #             self.update_status_bar("–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ —á–µ—Ç–µ–Ω–µ –Ω–∞ –±–∞–∑–∞—Ç–∞")
    #             return
            
    #         tables = result.stdout.strip().split()
            
    #         if "Kasi_all" in tables:
    #             messagebox.showinfo("–£—Å–ø–µ—Ö", 
    #                                f"‚úÖ –í—Ä—ä–∑–∫–∞—Ç–∞ –µ —É—Å–ø–µ—à–Ω–∞!\n\n"
    #                                f"–ù–∞–º–µ—Ä–µ–Ω–∏ —Ç–∞–±–ª–∏—Ü–∏: {len(tables)}\n"
    #                                f"–¢–∞–±–ª–∏—Ü–∞ 'Kasi_all': ‚úÖ –ù–∞–º–µ—Ä–µ–Ω–∞\n\n"
    #                                f"–í—Å–∏—á–∫–∏ —Ç–∞–±–ª–∏—Ü–∏:\n" + "\n".join(tables[:10]) + 
    #                                (f"\n... –∏ –æ—â–µ {len(tables)-10}" if len(tables) > 10 else ""))
    #             self.update_status_bar("‚úÖ –ë–∞–∑–∞—Ç–∞ –µ –≥–æ—Ç–æ–≤–∞ –∑–∞ —Ä–∞–±–æ—Ç–∞")
    #         else:
    #             messagebox.showwarning("–í–Ω–∏–º–∞–Ω–∏–µ", 
    #                                   f"–¢–∞–±–ª–∏—Ü–∞ 'Kasi_all' –Ω–µ –µ –Ω–∞–º–µ—Ä–µ–Ω–∞!\n\n"
    #                                   f"–ù–∞–ª–∏—á–Ω–∏ —Ç–∞–±–ª–∏—Ü–∏:\n" + "\n".join(tables))
    #             self.update_status_bar("‚ö†Ô∏è –¢–∞–±–ª–∏—Ü–∞ 'Kasi_all' –Ω–µ –µ –Ω–∞–º–µ—Ä–µ–Ω–∞")
                
    #     except Exception as e:
    #         messagebox.showerror("–ì—Ä–µ—à–∫–∞", f"–ù–µ–æ—á–∞–∫–≤–∞–Ω–∞ –≥—Ä–µ—à–∫–∞:\n{str(e)}")
    #         self.update_status_bar(f"–ì—Ä–µ—à–∫–∞: {str(e)}")
    
    def filter_data(self):
        """–§–∏–ª—Ç—Ä–∏—Ä–∞ –¥–∞–Ω–Ω–∏—Ç–µ –ø–æ –∏–∑–±—Ä–∞–Ω–∏—Ç–µ –¥–∞—Ç–∏"""
        if not self.mdb_file_path.get():
            messagebox.showerror("–ì—Ä–µ—à–∫–∞", "–ú–æ–ª—è –∏–∑–±–µ—Ä–µ—Ç–µ MDB —Ñ–∞–π–ª –ø—ä—Ä–≤–æ!")
            return
        
        try:
            start_date_str = self.start_date_entry.get().strip()
            end_date_str = self.end_date_entry.get().strip()
            
            if not start_date_str or not end_date_str:
                messagebox.showerror("–ì—Ä–µ—à–∫–∞", "–ú–æ–ª—è –≤—ä–≤–µ–¥–µ—Ç–µ –Ω–∞—á–∞–ª–Ω–∞ –∏ –∫—Ä–∞–π–Ω–∞ –¥–∞—Ç–∞!")
                return
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª–Ω–æ—Å—Ç—Ç–∞ –Ω–∞ –¥–∞—Ç–∏—Ç–µ
            if not self.validate_date_range():
                messagebox.showerror("–ì—Ä–µ—à–∫–∞", "–ö—Ä–∞–π–Ω–∞—Ç–∞ –¥–∞—Ç–∞ –Ω–µ –º–æ–∂–µ –¥–∞ –±—ä–¥–µ –ø—Ä–µ–¥–∏ –Ω–∞—á–∞–ª–Ω–∞—Ç–∞ –¥–∞—Ç–∞!")
                return
                
        except Exception as e:
            messagebox.showerror("–ì—Ä–µ—à–∫–∞", f"–ü—Ä–æ–±–ª–µ–º —Å —á–µ—Ç–µ–Ω–µ—Ç–æ –Ω–∞ –¥–∞—Ç–∏—Ç–µ:\n{str(e)}")
            return

        self.update_status_bar(f"–§–∏–ª—Ç—Ä–∏—Ä–∞–Ω–µ –æ—Ç {start_date_str} –¥–æ {end_date_str}...")
        self.root.update_idletasks()
        
        # –ò–∑–ø–æ–ª–∑–≤–∞–º–µ –ø–æ–¥—Ö–æ–¥—è—â–∏—è –º–µ—Ç–æ–¥ –∑–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞—Ç–∞
        if sys.platform == "win32" and PYODBC_AVAILABLE:
            success = self._filter_data_with_pyodbc(start_date_str, end_date_str)
        else:
            success = self._filter_data_with_mdb_tools(start_date_str, end_date_str)
        
        if success:
            self.extract_button.config(state="normal")

    def _filter_data_with_pyodbc(self, start_date_str, end_date_str):
        import pyodbc  # Local import —Å–∞–º–æ –∫–æ–≥–∞—Ç–æ –µ –Ω—É–∂–Ω–æ
        """–§–∏–ª—Ç—Ä–∏—Ä–∞–Ω–µ —Å pyodbc –∑–∞ Windows"""
        try:
            start_date = datetime.strptime(start_date_str, '%d.%m.%Y')
            end_date = datetime.strptime(end_date_str, '%d.%m.%Y')
            
            # –û–ø–∏—Ç–≤–∞–º–µ —Ä–∞–∑–ª–∏—á–Ω–∏ –¥—Ä–∞–π–≤–µ—Ä–∏ –ø–æ —Ä–µ–¥–∞ –Ω–∞ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
            driver_options = [
                'Microsoft Access Driver (*.mdb, *.accdb)',
                'Microsoft Access Driver (*.mdb)',
                'Microsoft Access Driver (*.accdb)',
                'Microsoft Office Access Driver (*.mdb, *.accdb)',
                'Microsoft Office 16.0 Access Database Engine OLE DB Provider'
            ]

            conn = None
            for driver in driver_options:
                try:
                    conn_str = f'DRIVER={{{driver}}};DBQ={self.mdb_file_path.get()};'
                    conn = pyodbc.connect(conn_str)
                    break  # –ê–∫–æ —É—Å–ø–µ–µ, —Å–ø–∏—Ä–∞–º–µ —Ç—É–∫
                except:
                    continue  # –û–ø–∏—Ç–≤–∞–º–µ —Å–ª–µ–¥–≤–∞—â–∏—è –¥—Ä–∞–π–≤–µ—Ä

            if conn is None:
                raise Exception("–ù–µ –º–æ–∂–µ –¥–∞ —Å–µ –Ω–∞–º–µ—Ä–∏ –ø–æ–¥—Ö–æ–¥—è—â Access –¥—Ä–∞–π–≤–µ—Ä")
            conn = pyodbc.connect(conn_str)
            cursor = conn.cursor()
            
            # SQL –∑–∞—è–≤–∫–∞ —Å —Ñ–∏–ª—Ç—Ä–∏—Ä–∞–Ω–µ –ø–æ –¥–∞—Ç–∞
            query = """
            SELECT * FROM Kasi_all 
            WHERE End_Data >= ? AND End_Data <= ?
            """
            
            cursor.execute(query, start_date, end_date)
            rows = cursor.fetchall()
            
            # –ü–æ–ª—É—á–∞–≤–∞–º–µ –∏–º–µ–Ω–∞—Ç–∞ –Ω–∞ –∫–æ–ª–æ–Ω–∏—Ç–µ
            columns = [column[0] for column in cursor.description]
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–∞–º–µ –≤ CSV —Ñ–æ—Ä–º–∞—Ç
            self.filtered_data_lines = []
            # Header
            self.filtered_data_lines.append(','.join(f'"{col}"' for col in columns))
            
            # –î–∞–Ω–Ω–∏
            for row in rows:
                csv_row = []
                for value in row:
                    if value is None:
                        csv_row.append('""')
                    else:
                        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–∞–º–µ –∫—ä–º string –∏ escape-–≤–∞–º–µ –∫–∞–≤–∏—á–∫–∏
                        str_value = str(value).replace('"', '""')
                        csv_row.append(f'"{str_value}"')
                self.filtered_data_lines.append(','.join(csv_row))
            
            conn.close()
            
            total_rows = len(self.filtered_data_lines) - 1
            percent = 100.0  # –ü—Ä–∏ SQL –∑–∞—è–≤–∫–∞ –≤—Å–∏—á–∫–∏ —Ä–µ–¥–æ–≤–µ —Å–∞ —Ñ–∏–ª—Ç—Ä–∏—Ä–∞–Ω–∏
            
            result_text = f"‚úÖ –§–∏–ª—Ç—Ä–∏—Ä–∞–Ω–∏ {total_rows} —Ä–µ–¥–∞"
            detailed_result = f"{result_text} (100%)"
            self.filter_result_label.config(text=detailed_result, foreground="green")
            self.update_status_bar(f"–§–∏–ª—Ç—Ä–∏—Ä–∞–Ω–µ –∑–∞–≤—ä—Ä—à–µ–Ω–æ: {total_rows} —Ä–µ–¥–∞")
            
            messagebox.showinfo("–†–µ–∑—É–ª—Ç–∞—Ç", f"–§–∏–ª—Ç—Ä–∏—Ä–∞–Ω–µ—Ç–æ –µ –∑–∞–≤—ä—Ä—à–µ–Ω–æ!\n\n–ü–µ—Ä–∏–æ–¥: {start_date_str} - {end_date_str}\n–§–∏–ª—Ç—Ä–∏—Ä–∞–Ω–∏ —Ä–µ–¥–æ–≤–µ: {total_rows}")
            return True
            
        except Exception as e:
            messagebox.showerror("–ì—Ä–µ—à–∫–∞", f"–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ —Ñ–∏–ª—Ç—Ä–∏—Ä–∞–Ω–µ:\n{str(e)}")
            self.update_status_bar(f"–ì—Ä–µ—à–∫–∞: {str(e)}")
            return False

    def _filter_data_with_mdb_tools(self, start_date_str, end_date_str):
        """–§–∏–ª—Ç—Ä–∏—Ä–∞–Ω–µ —Å mdb-tools –∑–∞ Linux (–∑–∞–ø–∞–∑–≤–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª–Ω–∏—è –∫–æ–¥)"""
        try:
            start_date = datetime.strptime(start_date_str, '%d.%m.%Y')
            end_date = datetime.strptime(end_date_str, '%d.%m.%Y')
            
            # –ò–∑–≤–ª–∏—á–∞–Ω–µ –Ω–∞ –¥–∞–Ω–Ω–∏—Ç–µ –æ—Ç —Ç–∞–±–ª–∏—Ü–∞—Ç–∞
            result = subprocess.run(["mdb-export", self.mdb_file_path.get(), "Kasi_all"], 
                                capture_output=True, text=False)
            
            if result.returncode != 0:
                messagebox.showerror("–ì—Ä–µ—à–∫–∞", f"–ù–µ –º–æ–∂–∞—Ö –¥–∞ –∏–∑–≤–ª–µ–∫–∞ –¥–∞–Ω–Ω–∏—Ç–µ:\n{result.stderr}")
                self.update_status_bar("–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–∏—á–∞–Ω–µ –Ω–∞ –¥–∞–Ω–Ω–∏")
                return False
            
            # –î–µ–∫–æ–¥–∏—Ä–∞–Ω–µ –∫–∞—Ç–æ UTF-8
            raw_content = result.stdout.decode('utf-8', errors='ignore')
            lines = raw_content.strip().split('\n')
            
            if len(lines) < 2:
                messagebox.showwarning("–í–Ω–∏–º–∞–Ω–∏–µ", "–¢–∞–±–ª–∏—Ü–∞—Ç–∞ –µ –ø—Ä–∞–∑–Ω–∞ –∏–ª–∏ –Ω—è–º–∞ –¥–∞–Ω–Ω–∏")
                return False
            
            # [–ó–∞–ø–∞–∑–≤–∞ —Ü–µ–ª–∏—è –æ—Ä–∏–≥–∏–Ω–∞–ª–µ–Ω –∫–æ–¥ –∑–∞ —Ñ–∏–ª—Ç—Ä–∏—Ä–∞–Ω–µ —Å mdb-tools...]
            # –ù–∞–º–∏—Ä–∞–º–µ –∏–Ω–¥–µ–∫—Å–∞ –Ω–∞ End_Data –∫–æ–ª–æ–Ω–∞—Ç–∞
            header_line = lines[0]
            header_reader = csv.reader(io.StringIO(header_line))
            headers = next(header_reader)
            
            end_data_index = None
            for i, header in enumerate(headers):
                if 'End_Data' in header:
                    end_data_index = i
                    break
            
            if end_data_index is None:
                messagebox.showerror("–ì—Ä–µ—à–∫–∞", "–ö–æ–ª–æ–Ω–∞ 'End_Data' –Ω–µ –µ –Ω–∞–º–µ—Ä–µ–Ω–∞ –≤ —Ç–∞–±–ª–∏—Ü–∞—Ç–∞!")
                return False
            
            # –§–∏–ª—Ç—Ä–∏—Ä–∞–Ω–µ –Ω–∞ –¥–∞–Ω–Ω–∏—Ç–µ
            filtered_lines = [lines[0]]  # –î–æ–±–∞–≤—è–º–µ header-–∞
            total_rows = 0
            filtered_rows = 0
            
            for line in lines[1:]:
                total_rows += 1
                try:
                    reader = csv.reader(io.StringIO(line))
                    fields = next(reader)
                    
                    if len(fields) > end_data_index:
                        end_data_str = fields[end_data_index].strip()
                        
                        if end_data_str and len(end_data_str) >= 8:
                            date_part = end_data_str.split()[0]
                            
                            row_date = None
                            try:
                                temp_date = datetime.strptime(date_part, '%m/%d/%y')
                                if temp_date.year < 1950:
                                    temp_date = temp_date.replace(year=temp_date.year + 100)
                                row_date = temp_date
                            except ValueError:
                                for date_format in ['%m.%d.%Y', '%d.%m.%Y', '%Y-%m-%d', '%m/%d/%Y']:
                                    try:
                                        row_date = datetime.strptime(date_part, date_format)
                                        break
                                    except ValueError:
                                        continue
                            
                            if row_date:
                                if start_date.date() <= row_date.date() <= end_date.date():
                                    filtered_lines.append(line)
                                    filtered_rows += 1
                except Exception as e:
                    continue
            
            self.filtered_data_lines = filtered_lines
            
            percent = (filtered_rows/total_rows*100) if total_rows > 0 else 0
            result_text = f"‚úÖ –§–∏–ª—Ç—Ä–∏—Ä–∞–Ω–∏ {filtered_rows} –æ—Ç –æ–±—â–æ {total_rows} —Ä–µ–¥–∞"
            detailed_result = f"{result_text} ({percent:.1f}%)"
            self.filter_result_label.config(text=detailed_result, foreground="green")
            self.update_status_bar(f"–§–∏–ª—Ç—Ä–∏—Ä–∞–Ω–µ –∑–∞–≤—ä—Ä—à–µ–Ω–æ: {filtered_rows} –æ—Ç {total_rows} —Ä–µ–¥–∞ ({percent:.1f}%)")
            
            messagebox.showinfo("–†–µ–∑—É–ª—Ç–∞—Ç", f"–§–∏–ª—Ç—Ä–∏—Ä–∞–Ω–µ—Ç–æ –µ –∑–∞–≤—ä—Ä—à–µ–Ω–æ!\n\n–ü–µ—Ä–∏–æ–¥: {start_date_str} - {end_date_str}\n–û–±—â–æ —Ä–µ–¥–æ–≤–µ: {total_rows}\n–§–∏–ª—Ç—Ä–∏—Ä–∞–Ω–∏ —Ä–µ–¥–æ–≤–µ: {filtered_rows}")
            return True
            
        except Exception as e:
            messagebox.showerror("–ì—Ä–µ—à–∫–∞", f"–ù–µ–æ—á–∞–∫–≤–∞–Ω–∞ –≥—Ä–µ—à–∫–∞:\n{str(e)}")
            self.update_status_bar(f"–ì—Ä–µ—à–∫–∞: {str(e)}")
            return False

    def extract_specific_columns(self):
        """–ò–∑–≤–ª–∏—á–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏—Ç–µ 10 –∫–æ–ª–æ–Ω–∏ –æ—Ç —Ñ–∏–ª—Ç—Ä–∏—Ä–∞–Ω–∏—Ç–µ –¥–∞–Ω–Ω–∏"""
        if not hasattr(self, 'filtered_data_lines') or len(self.filtered_data_lines) < 2:
            messagebox.showerror("–ì—Ä–µ—à–∫–∞", "–ù—è–º–∞ —Ñ–∏–ª—Ç—Ä–∏—Ä–∞–Ω–∏ –¥–∞–Ω–Ω–∏! –ü—ä—Ä–≤–æ –Ω–∞–ø—Ä–∞–≤–µ—Ç–µ —Ñ–∏–ª—Ç—Ä–∞—Ü–∏—è.")
            return False
        
        self.update_status_bar("–ò–∑–≤–ª–∏—á–∞–Ω–µ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏ –∫–æ–ª–æ–Ω–∏...")
        
        # –ö–æ–ª–æ–Ω–∏—Ç–µ –∫–æ–∏—Ç–æ –Ω–∏ —Ç—Ä—è–±–≤–∞—Ç
        required_columns = ['Number', 'End_Data', 'Model', 'Number_EKA', 'Ime_Obekt', 
                        'Adres_Obekt', 'Dan_Number', 'Phone', 'Ime_Firma', 'bulst']
        
        try:
            # –ù–∞–º–∏—Ä–∞–º–µ –∏–Ω–¥–µ–∫—Å–∏—Ç–µ –Ω–∞ –∫–æ–ª–æ–Ω–∏—Ç–µ
            header_line = self.filtered_data_lines[0]
            header_reader = csv.reader(io.StringIO(header_line))
            headers = next(header_reader)
            
            # –ú–∞–ø–∏–Ω–≥ –Ω–∞ –∫–æ–ª–æ–Ω–∏ –∫—ä–º –∏–Ω–¥–µ–∫—Å–∏
            column_indices = {}
            missing_columns = []
            
            for col_name in required_columns:
                found_index = None
                for i, header in enumerate(headers):
                    if col_name.lower() in header.lower():
                        found_index = i
                        break
                
                if found_index is not None:
                    column_indices[col_name] = found_index
                else:
                    missing_columns.append(col_name)
            
            if missing_columns:
                messagebox.showwarning("–í–Ω–∏–º–∞–Ω–∏–µ", 
                                    f"–°–ª–µ–¥–Ω–∏—Ç–µ –∫–æ–ª–æ–Ω–∏ –Ω–µ —Å–∞ –Ω–∞–º–µ—Ä–µ–Ω–∏:\n{', '.join(missing_columns)}\n\n"
                                    f"–©–µ –±—ä–¥–∞—Ç –∏–∑–≤–ª–µ—á–µ–Ω–∏ —Å–∞–º–æ –Ω–∞–º–µ—Ä–µ–Ω–∏—Ç–µ –∫–æ–ª–æ–Ω–∏.")
            
            # –°—ä–∑–¥–∞–≤–∞–º–µ –Ω–æ–≤–∏—è header
            new_header = [col for col in required_columns if col in column_indices]
            
            # –ò–∑–≤–ª–∏—á–∞–º–µ –¥–∞–Ω–Ω–∏—Ç–µ
            extracted_data = []
            extracted_data.append(','.join(f'"{col}"' for col in new_header))  # Header
            
            for line in self.filtered_data_lines[1:]:
                try:
                    reader = csv.reader(io.StringIO(line))
                    fields = next(reader)
                    
                    # –ò–∑–≤–ª–∏—á–∞–º–µ –Ω—É–∂–Ω–∏—Ç–µ –ø–æ–ª–µ—Ç–∞
                    new_row = []
                    for col_name in new_header:
                        if column_indices[col_name] < len(fields):
                            field_value = fields[column_indices[col_name]]
                            # –ü–æ–ø—Ä–∞–≤—è–º–µ –∫–æ–¥–∏—Ä–æ–≤–∫–∞—Ç–∞ —Å–∞–º–æ –Ω–∞ Linux
                            if sys.platform != "win32":
                                fixed_value = self.fix_encoding_utf8_to_windows1251(field_value)
                            else:
                                fixed_value = field_value
                            new_row.append(f'"{fixed_value}"')
                        else:
                            new_row.append('""')  # –ü—Ä–∞–∑–Ω–æ –ø–æ–ª–µ –∞–∫–æ –Ω—è–º–∞ –¥–∞–Ω–Ω–∏
                    
                    extracted_data.append(','.join(new_row))
                
                except Exception as e:
                    # –ü—Ä–µ—Å–∫–∞—á–∞–º–µ –ø—Ä–æ–±–ª–µ–º–Ω–∏ —Ä–µ–¥–æ–≤–µ
                    continue
            
            # –ó–∞–ø–∞–∑–≤–∞–º–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏—Ç–µ –¥–∞–Ω–Ω–∏
            self.extracted_data_lines = extracted_data
            
            # –ü–æ–∫–∞–∑–≤–∞–º–µ —Ä–µ–∑—É–ª—Ç–∞—Ç–∞
            total_extracted = len(extracted_data) - 1  # –ë–µ–∑ header-–∞
            
            result_text = f"‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–∏ {len(new_header)} –∫–æ–ª–æ–Ω–∏ –æ—Ç {total_extracted} —Ä–µ–¥–∞"
            if hasattr(self, 'filtered_data_lines'):
                original_rows = len(self.filtered_data_lines) - 1
                result_text += f" (–æ—Ç {original_rows} —Ñ–∏–ª—Ç—Ä–∏—Ä–∞–Ω–∏)"
            
            self.extract_result_label.config(text=result_text, foreground="green")
            self.update_status_bar(f"–ò–∑–≤–ª–∏—á–∞–Ω–µ –∑–∞–≤—ä—Ä—à–µ–Ω–æ: {total_extracted} —Ä–µ–¥–∞ —Å {len(new_header)} –∫–æ–ª–æ–Ω–∏")
            
            # –ê–∫—Ç–∏–≤–∏—Ä–∞–º–µ –±—É—Ç–æ–Ω–∏—Ç–µ –∑–∞ –∑–∞–ø–∏—Å
            self.save_csv_button.config(state="normal")
            self.save_json_button.config(state="normal")
            
            messagebox.showinfo("–£—Å–ø–µ—Ö", 
                            f"–ò–∑–≤–ª–∏—á–∞–Ω–µ—Ç–æ –µ —É—Å–ø–µ—à–Ω–æ!\n\n"
                            f"–ö–æ–ª–æ–Ω–∏: {len(new_header)}\n"
                            f"–†–µ–¥–æ–≤–µ: {total_extracted}\n\n"
                            f"–ù–∞–º–µ—Ä–µ–Ω–∏ –∫–æ–ª–æ–Ω–∏:\n{', '.join(new_header)}")
            
            return True
            
        except Exception as e:
            messagebox.showerror("–ì—Ä–µ—à–∫–∞", f"–ù–µ–æ—á–∞–∫–≤–∞–Ω–∞ –≥—Ä–µ—à–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–∏—á–∞–Ω–µ:\n{str(e)}")
            self.update_status_bar(f"–ì—Ä–µ—à–∫–∞: {str(e)}")
            return False
    
    def export_full_table(self):
        """–ï–∫—Å–ø–æ—Ä—Ç–∏—Ä–∞ —Ü—è–ª–∞—Ç–∞ —Ç–∞–±–ª–∏—Ü–∞ Kasi_all –≤ CSV —Ñ–æ—Ä–º–∞—Ç"""
        if not self.mdb_file_path.get():
            messagebox.showerror("–ì—Ä–µ—à–∫–∞", "–ú–æ–ª—è –∏–∑–±–µ—Ä–µ—Ç–µ MDB —Ñ–∞–π–ª –ø—ä—Ä–≤–æ!")
            return
        
        # –ò–∑–±–æ—Ä –Ω–∞ —Ñ–∞–π–ª –∑–∞ –∑–∞–ø–∏—Å
        file_path = filedialog.asksaveasfilename(
            title="–ï–∫—Å–ø–æ—Ä—Ç–∏—Ä–∞–π —Ü—è–ª–∞ —Ç–∞–±–ª–∏—Ü–∞ –∫–∞—Ç–æ CSV",
            defaultextension=".csv",
            filetypes=[("CSV —Ñ–∞–π–ª–æ–≤–µ", "*.csv"), ("–í—Å–∏—á–∫–∏ —Ñ–∞–π–ª–æ–≤–µ", "*.*")],
            initialfile="Kasi_all_full_export.csv"
        )
        
        if not file_path:
            return
        
        try:
            self.update_status_bar("–ï–∫—Å–ø–æ—Ä—Ç–∏—Ä–∞–Ω–µ –Ω–∞ —Ü—è–ª–∞—Ç–∞ —Ç–∞–±–ª–∏—Ü–∞...")
            
            # –ò–∑–ø–æ–ª–∑–≤–∞–º–µ –ø–æ–¥—Ö–æ–¥—è—â–∏—è –º–µ—Ç–æ–¥ –∑–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞—Ç–∞
            if sys.platform == "win32" and PYODBC_AVAILABLE:
                success = self._export_full_table_with_pyodbc(file_path)
            else:
                success = self._export_full_table_with_mdb_tools(file_path)
            
            if success:
                self.update_status_bar(f"–ü—ä–ª–µ–Ω –µ–∫—Å–ø–æ—Ä—Ç –∑–∞–≤—ä—Ä—à–µ–Ω: {os.path.basename(file_path)}")
            
        except Exception as e:
            messagebox.showerror("–ì—Ä–µ—à–∫–∞", f"–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –ø—ä–ª–µ–Ω –µ–∫—Å–ø–æ—Ä—Ç:\n{str(e)}")
            self.update_status_bar(f"–ì—Ä–µ—à–∫–∞: {str(e)}")

    def _export_full_table_with_pyodbc(self, file_path):
        import pyodbc  # Local import —Å–∞–º–æ –∫–æ–≥–∞—Ç–æ –µ –Ω—É–∂–Ω–æ
        """–ü—ä–ª–µ–Ω –µ–∫—Å–ø–æ—Ä—Ç —Å pyodbc –∑–∞ Windows"""
        try:
            # –û–ø–∏—Ç–≤–∞–º–µ —Ä–∞–∑–ª–∏—á–Ω–∏ –¥—Ä–∞–π–≤–µ—Ä–∏ –ø–æ —Ä–µ–¥–∞ –Ω–∞ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
            driver_options = [
                'Microsoft Access Driver (*.mdb, *.accdb)',
                'Microsoft Access Driver (*.mdb)',
                'Microsoft Access Driver (*.accdb)',
                'Microsoft Office Access Driver (*.mdb, *.accdb)',
                'Microsoft Office 16.0 Access Database Engine OLE DB Provider'
            ]

            conn = None
            for driver in driver_options:
                try:
                    conn_str = f'DRIVER={{{driver}}};DBQ={self.mdb_file_path.get()};'
                    conn = pyodbc.connect(conn_str)
                    break  # –ê–∫–æ —É—Å–ø–µ–µ, —Å–ø–∏—Ä–∞–º–µ —Ç—É–∫
                except:
                    continue  # –û–ø–∏—Ç–≤–∞–º–µ —Å–ª–µ–¥–≤–∞—â–∏—è –¥—Ä–∞–π–≤–µ—Ä

            if conn is None:
                raise Exception("–ù–µ –º–æ–∂–µ –¥–∞ —Å–µ –Ω–∞–º–µ—Ä–∏ –ø–æ–¥—Ö–æ–¥—è—â Access –¥—Ä–∞–π–≤–µ—Ä")
            conn = pyodbc.connect(conn_str)
            cursor = conn.cursor()
            
            cursor.execute("SELECT * FROM Kasi_all")
            rows = cursor.fetchall()
            columns = [column[0] for column in cursor.description]
            
            # –ó–∞–ø–∏—Å–≤–∞–º–µ —Ñ–∞–π–ª–∞
            with open(file_path, 'w', encoding='utf-8', newline='') as f:
                writer = csv.writer(f)
                writer.writerow(columns)  # Header
                
                for row in rows:
                    writer.writerow(row)
            
            conn.close()
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            total_rows = len(rows)
            file_size = os.path.getsize(file_path)
            total_columns = len(columns)
            
            messagebox.showinfo("–£—Å–ø–µ—Ö", 
                            f"–ü—ä–ª–Ω–∏—è—Ç –µ–∫—Å–ø–æ—Ä—Ç –µ –∑–∞–≤—ä—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!\n\n"
                            f"üìÅ –§–∞–π–ª: {os.path.basename(file_path)}\n"
                            f"üìä –†–µ–¥–æ–≤–µ: {total_rows:,}\n"
                            f"üìã –ö–æ–ª–æ–Ω–∏: {total_columns}\n"
                            f"üíæ –†–∞–∑–º–µ—Ä: {file_size / 1024 / 1024:.1f} MB\n"
                            f"üîó –ü—ä—Ç: {file_path}")
            return True
            
        except Exception as e:
            messagebox.showerror("–ì—Ä–µ—à–∫–∞", f"–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –µ–∫—Å–ø–æ—Ä—Ç —Å pyodbc:\n{str(e)}")
            return False

    def _export_full_table_with_mdb_tools(self, file_path):
        """–ü—ä–ª–µ–Ω –µ–∫—Å–ø–æ—Ä—Ç —Å mdb-tools –∑–∞ Linux (–∑–∞–ø–∞–∑–≤–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª–Ω–∏—è –∫–æ–¥)"""
        try:
            # –ò–∑–≤–ª–∏—á–∞–Ω–µ –Ω–∞ –≤—Å–∏—á–∫–∏ –¥–∞–Ω–Ω–∏ –æ—Ç —Ç–∞–±–ª–∏—Ü–∞—Ç–∞
            result = subprocess.run(["mdb-export", self.mdb_file_path.get(), "Kasi_all"], 
                                capture_output=True, text=False)
            
            if result.returncode != 0:
                messagebox.showerror("–ì—Ä–µ—à–∫–∞", f"–ù–µ –º–æ–∂–∞—Ö –¥–∞ –µ–∫—Å–ø–æ—Ä—Ç–∏—Ä–∞–º —Ç–∞–±–ª–∏—Ü–∞—Ç–∞:\n{result.stderr}")
                return False
            
            # –î–µ–∫–æ–¥–∏—Ä–∞–Ω–µ –∫–∞—Ç–æ UTF-8
            raw_content = result.stdout.decode('utf-8', errors='ignore')
            lines = raw_content.strip().split('\n')
            
            if len(lines) < 1:
                messagebox.showwarning("–í–Ω–∏–º–∞–Ω–∏–µ", "–¢–∞–±–ª–∏—Ü–∞—Ç–∞ –µ –ø—Ä–∞–∑–Ω–∞")
                return False
            
            # –ü–æ–ø—Ä–∞–≤—è–º–µ –∫–æ–¥–∏—Ä–æ–≤–∫–∞—Ç–∞ –Ω–∞ –≤—Å–∏—á–∫–∏ —Ä–µ–¥–æ–≤–µ
            fixed_lines = []
            
            for i, line in enumerate(lines):
                if i == 0:
                    # Header –æ—Å—Ç–∞–≤–∞ –∫–∞–∫—Ç–æ –µ
                    fixed_lines.append(line)
                else:
                    # –ü–æ–ø—Ä–∞–≤—è–º–µ –±—ä–ª–≥–∞—Ä—Å–∫–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–µ
                    fixed_line = self.fix_encoding_utf8_to_windows1251(line)
                    fixed_lines.append(fixed_line)
            
            # –ó–∞–ø–∏—Å–≤–∞–º–µ —Ñ–∞–π–ª–∞
            with open(file_path, 'w', encoding='utf-8', newline='') as f:
                for line in fixed_lines:
                    f.write(line + '\n')
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            total_rows = len(fixed_lines) - 1  # –ë–µ–∑ header
            file_size = os.path.getsize(file_path)
            
            # –ë—Ä–æ–∏–º –∫–æ–ª–æ–Ω–∏—Ç–µ
            header_reader = csv.reader(io.StringIO(fixed_lines[0]))
            headers = next(header_reader)
            total_columns = len(headers)
            
            messagebox.showinfo("–£—Å–ø–µ—Ö", 
                            f"–ü—ä–ª–Ω–∏—è—Ç –µ–∫—Å–ø–æ—Ä—Ç –µ –∑–∞–≤—ä—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!\n\n"
                            f"üìÅ –§–∞–π–ª: {os.path.basename(file_path)}\n"
                            f"üìä –†–µ–¥–æ–≤–µ: {total_rows:,}\n"
                            f"üìã –ö–æ–ª–æ–Ω–∏: {total_columns}\n"
                            f"üíæ –†–∞–∑–º–µ—Ä: {file_size / 1024 / 1024:.1f} MB\n"
                            f"üîó –ü—ä—Ç: {file_path}")
            return True
            
        except Exception as e:
            messagebox.showerror("–ì—Ä–µ—à–∫–∞", f"–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –µ–∫—Å–ø–æ—Ä—Ç —Å mdb-tools:\n{str(e)}")
            return False

    def update_status_bar(self, message):
        """–û–±–Ω–æ–≤—è–≤–∞ —Å—Ç–∞—Ç—É—Å –±–∞—Ä–∞"""
        self.status_bar.config(text=message)
        self.root.update_idletasks()
    
    def exit_application(self):
        """–ó–∞—Ç–≤–∞—Ä—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ—Ç–æ"""
        self.root.quit()

    def save_csv(self):
        """–ó–∞–ø–∏—Å –≤ CSV —Ñ–æ—Ä–º–∞—Ç"""
        if not hasattr(self, 'extracted_data_lines') or len(self.extracted_data_lines) < 2:
            messagebox.showerror("–ì—Ä–µ—à–∫–∞", "–ù—è–º–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏ –¥–∞–Ω–Ω–∏ –∑–∞ –∑–∞–ø–∏—Å!")
            return
        
        # –ò–∑–±–æ—Ä –Ω–∞ —Ñ–∞–π–ª –∑–∞ –∑–∞–ø–∏—Å
        file_path = filedialog.asksaveasfilename(
            title="–ó–∞–ø–∏—à–∏ –∫–∞—Ç–æ CSV",
            defaultextension=".csv",
            filetypes=[("CSV —Ñ–∞–π–ª–æ–≤–µ", "*.csv"), ("–í—Å–∏—á–∫–∏ —Ñ–∞–π–ª–æ–≤–µ", "*.*")]
        )
        
        if not file_path:
            return
        
        try:
            self.update_status_bar("–ó–∞–ø–∏—Å–≤–∞–Ω–µ –Ω–∞ CSV —Ñ–∞–π–ª...")
            
            # –ó–∞–ø–∏—Å–≤–∞–º–µ –¥–∞–Ω–Ω–∏—Ç–µ
            with open(file_path, 'w', encoding='utf-8', newline='') as f:
                for line in self.extracted_data_lines:
                    f.write(line + '\n')
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            total_rows = len(self.extracted_data_lines) - 1  # –ë–µ–∑ header
            file_size = os.path.getsize(file_path)
            
            self.update_status_bar(f"CSV —Ñ–∞–π–ª –∑–∞–ø–∏—Å–∞–Ω —É—Å–ø–µ—à–Ω–æ: {os.path.basename(file_path)}")
            
            messagebox.showinfo("–£—Å–ø–µ—Ö", 
                               f"CSV —Ñ–∞–π–ª—ä—Ç –µ –∑–∞–ø–∏—Å–∞–Ω —É—Å–ø–µ—à–Ω–æ!\n\n"
                               f"üìÅ –§–∞–π–ª: {os.path.basename(file_path)}\n"
                               f"üìä –†–µ–¥–æ–≤–µ: {total_rows}\n"
                               f"üíæ –†–∞–∑–º–µ—Ä: {file_size / 1024:.1f} KB\n"
                               f"üîó –ü—ä—Ç: {file_path}")
            
        except Exception as e:
            messagebox.showerror("–ì—Ä–µ—à–∫–∞", f"–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–≤–∞–Ω–µ –Ω–∞ CSV:\n{str(e)}")
            self.update_status_bar("–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–≤–∞–Ω–µ –Ω–∞ CSV")
    
    def save_json(self):
        """–ó–∞–ø–∏—Å –≤ JSON —Ñ–æ—Ä–º–∞—Ç –∫–∞—Ç–æ –º–∞—Å–∏–≤ –æ—Ç –æ–±–µ–∫—Ç–∏"""
        if not hasattr(self, 'extracted_data_lines') or len(self.extracted_data_lines) < 2:
            messagebox.showerror("–ì—Ä–µ—à–∫–∞", "–ù—è–º–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏ –¥–∞–Ω–Ω–∏ –∑–∞ –∑–∞–ø–∏—Å!")
            return
        
        # –ò–∑–±–æ—Ä –Ω–∞ —Ñ–∞–π–ª –∑–∞ –∑–∞–ø–∏—Å
        file_path = filedialog.asksaveasfilename(
            title="–ó–∞–ø–∏—à–∏ –∫–∞—Ç–æ JSON",
            defaultextension=".json",
            filetypes=[("JSON —Ñ–∞–π–ª–æ–≤–µ", "*.json"), ("–í—Å–∏—á–∫–∏ —Ñ–∞–π–ª–æ–≤–µ", "*.*")]
        )
        
        if not file_path:
            return
        
        try:
            self.update_status_bar("–ó–∞–ø–∏—Å–≤–∞–Ω–µ –Ω–∞ JSON —Ñ–∞–π–ª...")
            
            # –ü–∞—Ä—Å–∏—Ä–∞–º–µ header-–∞
            header_line = self.extracted_data_lines[0]
            header_reader = csv.reader(io.StringIO(header_line))
            headers = next(header_reader)
            
            # –°—ä–∑–¥–∞–≤–∞–º–µ –º–∞—Å–∏–≤ –æ—Ç –æ–±–µ–∫—Ç–∏
            json_data = []
            
            for line in self.extracted_data_lines[1:]:
                try:
                    reader = csv.reader(io.StringIO(line))
                    fields = next(reader)
                    
                    # –°—ä–∑–¥–∞–≤–∞–º–µ –æ–±–µ–∫—Ç –∑–∞ —Ç–æ–∑–∏ —Ä–µ–¥
                    row_object = {}
                    for i, header in enumerate(headers):
                        if i < len(fields):
                            row_object[header] = fields[i]
                        else:
                            row_object[header] = ""
                    
                    json_data.append(row_object)
                
                except Exception as e:
                    # –ü—Ä–µ—Å–∫–∞—á–∞–º–µ –ø—Ä–æ–±–ª–µ–º–Ω–∏ —Ä–µ–¥–æ–≤–µ
                    continue
            
            # –ó–∞–ø–∏—Å–≤–∞–º–µ JSON —Ñ–∞–π–ª–∞
            import json
            with open(file_path, 'w', encoding='utf-8') as f:
                json.dump(json_data, f, ensure_ascii=False, indent=2)
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            total_objects = len(json_data)
            file_size = os.path.getsize(file_path)
            
            self.update_status_bar(f"JSON —Ñ–∞–π–ª –∑–∞–ø–∏—Å–∞–Ω —É—Å–ø–µ—à–Ω–æ: {os.path.basename(file_path)}")
            
            messagebox.showinfo("–£—Å–ø–µ—Ö", 
                               f"JSON —Ñ–∞–π–ª—ä—Ç –µ –∑–∞–ø–∏—Å–∞–Ω —É—Å–ø–µ—à–Ω–æ!\n\n"
                               f"üìÅ –§–∞–π–ª: {os.path.basename(file_path)}\n"
                               f"üìä –û–±–µ–∫—Ç–∏: {total_objects}\n"
                               f"üíæ –†–∞–∑–º–µ—Ä: {file_size / 1024:.1f} KB\n"
                               f"üîó –ü—ä—Ç: {file_path}")
            
        except Exception as e:
            messagebox.showerror("–ì—Ä–µ—à–∫–∞", f"–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–≤–∞–Ω–µ –Ω–∞ JSON:\n{str(e)}")
            self.update_status_bar("–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–≤–∞–Ω–µ –Ω–∞ JSON")
    
    # ========== –û–†–ò–ì–ò–ù–ê–õ–ù–ò –§–£–ù–ö–¶–ò–ò –ó–ê –ö–û–î–ò–†–û–í–ö–ê ==========
    
    def fix_encoding_utf8_to_windows1251(self, text):
        """
        –ü–æ–ø—Ä–∞–≤—è —Ç–µ–∫—Å—Ç –∏–∑–ø–æ–ª–∑–≤–∞–π–∫–∏ —Ä–∞–±–æ—Ç–µ—â–∏—è –º–µ—Ç–æ–¥: UTF-8‚ÜíLatin-1‚ÜíWindows-1251
        (–ó–∞–ø–∞–∑–µ–Ω–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è)
        """
        try:
            # –†–∞–±–æ—Ç–µ—â–∏—è –º–µ—Ç–æ–¥ –æ—Ç —Ç–µ—Å—Ç–∞
            step1 = text.encode('latin-1', errors='ignore')
            result = step1.decode('windows-1251', errors='ignore')
            return result
        except:
            return text  # –ê–∫–æ –∏–º–∞ –ø—Ä–æ–±–ª–µ–º, –≤—Ä—ä—â–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª–∞


def main():
    """–ì–ª–∞–≤–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è"""
    # –ü—Ä–æ–≤–µ—Ä—è–≤–∞–º–µ –∑–∞ mdb-tools –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–∏—Ä–∞–Ω–µ
    try:
        subprocess.run(["mdb-tables", "--help"], capture_output=True)
    except FileNotFoundError:
        print("‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: mdb-tools –Ω–µ –µ –Ω–∞–º–µ—Ä–µ–Ω!")
        print("–ú–æ–ª—è –∏–Ω—Å—Ç–∞–ª–∏—Ä–∞–π—Ç–µ mdb-tools –∑–∞ –¥–∞ —Ä–∞–±–æ—Ç–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ—Ç–æ.")
    
    # –°—Ç–∞—Ä—Ç–∏—Ä–∞–º–µ GUI
    root = tk.Tk()
    app = KasiExtractor(root)
    root.mainloop()


if __name__ == "__main__":
    main()